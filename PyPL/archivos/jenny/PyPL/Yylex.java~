/* The following code was generated by JFlex 1.4.3 on 2/8/16 9:40 AM */

import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 2/8/16 9:40 AM from the specification file
 * <tt>PYPLC.flex</tt>
 */
class Yylex implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int IDENTACION = 2;
  public static final int CERRARLLAVE = 4;
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\4\1\52\1\0"+
    "\1\7\1\0\1\55\1\53\1\10\1\15\1\23\1\6\1\46\1\44"+
    "\1\14\1\12\1\5\1\24\11\11\1\45\1\43\1\51\1\47\1\50"+
    "\2\0\4\56\1\13\25\56\1\37\1\0\1\40\1\0\1\56\1\0"+
    "\1\21\2\56\1\33\1\31\1\16\1\36\1\35\1\27\2\56\1\17"+
    "\1\56\1\30\1\20\1\25\1\56\1\26\1\32\1\22\2\56\1\34"+
    "\3\56\1\41\1\54\1\42\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\1\1\3\2\1\3\1\4\1\2\1\1\1\5"+
    "\1\1\1\6\1\7\1\10\1\6\1\11\1\5\6\6"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\2\1\1\26\1\27\1\0"+
    "\1\30\1\31\3\0\2\32\1\0\1\33\1\0\1\34"+
    "\1\0\1\35\3\0\2\6\1\35\2\6\1\36\1\37"+
    "\1\6\1\40\1\6\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\4\0\1\50\4\0\1\35\2\0\1\6"+
    "\1\51\2\6\1\52\3\6\5\0\1\2\3\0\3\6"+
    "\1\53\1\54\1\6\1\55\1\56\4\0\1\57\1\60"+
    "\1\61\1\62\2\0\1\2\2\0\1\2\2\0\1\2"+
    "\1\63\1\64\1\63";

  private static int [] zzUnpackAction() {
    int [] result = new int[134];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\57\0\136\0\215\0\274\0\353\0\u011a\0\u0149"+
    "\0\353\0\u0178\0\u01a7\0\u01d6\0\u0205\0\u0234\0\u0263\0\u0292"+
    "\0\353\0\u02c1\0\u02f0\0\353\0\u031f\0\u034e\0\u037d\0\u03ac"+
    "\0\u03db\0\u040a\0\u0439\0\353\0\353\0\353\0\353\0\353"+
    "\0\353\0\353\0\u0468\0\u0497\0\u04c6\0\u04f5\0\u0524\0\u0553"+
    "\0\u0582\0\353\0\u05b1\0\u05e0\0\353\0\u060f\0\u063e\0\u066d"+
    "\0\u069c\0\353\0\u06cb\0\u06fa\0\353\0\u0729\0\353\0\u0758"+
    "\0\u0787\0\u07b6\0\u02c1\0\u07e5\0\u0814\0\u0843\0\u031f\0\u0872"+
    "\0\u08a1\0\u0292\0\u08d0\0\u08ff\0\u0292\0\u092e\0\353\0\353"+
    "\0\353\0\353\0\353\0\353\0\353\0\u095d\0\u098c\0\u09bb"+
    "\0\u069c\0\u06cb\0\u09ea\0\u0a19\0\u0a48\0\u0a77\0\u0aa6\0\u0aa6"+
    "\0\u0ad5\0\u0b04\0\u0292\0\u0b33\0\u0b62\0\u0292\0\u0b91\0\u0bc0"+
    "\0\u0bef\0\u0c1e\0\u0c4d\0\u0c7c\0\u0cab\0\u0cda\0\u0a19\0\u0d09"+
    "\0\u0d38\0\u0d67\0\u0d96\0\u0dc5\0\u0df4\0\u0292\0\u0292\0\u0e23"+
    "\0\u0e52\0\u0e81\0\u0eb0\0\u0edf\0\u0f0e\0\u0f3d\0\u0292\0\u0292"+
    "\0\u0292\0\u0292\0\u0f6c\0\u0f9b\0\u0f0e\0\u0fca\0\u0ff9\0\u1028"+
    "\0\u1057\0\u1086\0\u10b5\0\u10e4\0\353\0\353";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[134];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\6\1\7\1\10\2\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\4\20\1\24"+
    "\1\25\1\26\1\27\1\30\1\20\1\31\1\20\1\32"+
    "\1\33\2\20\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\20\3\0\1\53\1\54\54\0\1\55\1\56"+
    "\1\57\67\0\1\60\52\0\1\61\12\0\1\61\113\0"+
    "\1\11\54\0\1\62\2\0\1\63\1\64\52\62\5\0"+
    "\1\65\1\66\56\0\1\67\50\0\1\14\1\7\1\11"+
    "\54\14\10\0\1\70\57\0\1\16\1\71\1\72\10\0"+
    "\1\16\4\0\1\72\36\0\1\71\12\0\1\71\43\0"+
    "\1\20\1\0\1\20\2\0\5\20\1\0\13\20\17\0"+
    "\1\20\1\0\4\73\11\0\1\74\51\0\1\20\1\0"+
    "\1\20\2\0\1\20\1\75\1\76\2\20\1\0\13\20"+
    "\17\0\1\20\11\0\1\77\1\71\1\72\10\0\1\77"+
    "\4\0\1\72\36\0\1\20\1\0\1\20\2\0\5\20"+
    "\1\0\2\20\1\100\10\20\17\0\1\20\11\0\1\20"+
    "\1\0\1\20\2\0\3\20\1\101\1\20\1\0\13\20"+
    "\17\0\1\20\11\0\1\20\1\0\1\20\2\0\1\102"+
    "\4\20\1\0\4\20\1\103\6\20\17\0\1\20\11\0"+
    "\1\20\1\0\1\20\2\0\1\20\1\104\3\20\1\0"+
    "\13\20\17\0\1\20\11\0\1\20\1\0\1\20\2\0"+
    "\2\20\1\105\2\20\1\0\13\20\17\0\1\20\11\0"+
    "\1\20\1\0\1\20\2\0\5\20\1\0\11\20\1\106"+
    "\1\20\17\0\1\20\46\0\1\107\57\0\1\110\56\0"+
    "\1\111\56\0\1\112\56\0\1\113\62\0\1\114\57\0"+
    "\1\115\5\0\1\53\57\0\1\116\55\0\1\56\57\0"+
    "\1\117\53\0\4\60\11\0\1\120\51\0\1\61\12\0"+
    "\1\121\35\0\1\122\1\64\56\0\1\123\52\0\6\124"+
    "\1\125\50\124\10\0\1\126\57\0\1\71\1\0\1\72"+
    "\10\0\1\71\4\0\1\72\36\0\1\127\2\0\1\130"+
    "\7\0\1\127\21\0\1\130\27\0\1\131\50\0\1\20"+
    "\1\0\1\20\2\0\2\20\1\132\2\20\1\0\13\20"+
    "\17\0\1\20\11\0\1\20\1\0\1\20\2\0\5\20"+
    "\1\0\2\20\1\133\10\20\17\0\1\20\11\0\1\20"+
    "\1\0\1\20\2\0\5\20\1\0\3\20\1\134\7\20"+
    "\17\0\1\20\11\0\1\20\1\0\1\20\2\0\5\20"+
    "\1\0\4\20\1\135\6\20\17\0\1\20\11\0\1\20"+
    "\1\0\1\20\2\0\4\20\1\136\1\0\13\20\17\0"+
    "\1\20\11\0\1\20\1\0\1\20\2\0\5\20\1\0"+
    "\3\20\1\137\2\20\1\140\4\20\17\0\1\20\11\0"+
    "\1\20\1\0\1\20\2\0\5\20\1\0\3\20\1\141"+
    "\7\20\17\0\1\20\4\0\1\142\56\0\1\143\71\0"+
    "\1\144\43\0\1\145\52\0\6\124\1\146\55\124\1\147"+
    "\1\146\50\124\10\150\1\151\46\150\11\0\1\127\12\0"+
    "\1\127\52\0\1\152\47\0\1\20\1\0\1\20\2\0"+
    "\3\20\1\153\1\20\1\0\13\20\17\0\1\20\11\0"+
    "\1\20\1\0\1\20\2\0\5\20\1\0\4\20\1\154"+
    "\6\20\17\0\1\20\11\0\1\20\1\0\1\20\2\0"+
    "\5\20\1\0\12\20\1\155\17\0\1\20\11\0\1\20"+
    "\1\0\1\20\2\0\1\156\4\20\1\0\13\20\17\0"+
    "\1\20\11\0\1\20\1\0\1\20\2\0\5\20\1\0"+
    "\5\20\1\157\5\20\17\0\1\20\11\0\1\20\1\0"+
    "\1\20\2\0\1\20\1\160\3\20\1\0\13\20\17\0"+
    "\1\20\4\0\1\161\56\0\1\162\72\0\1\163\42\0"+
    "\1\122\52\0\5\124\1\11\1\146\50\124\10\150\1\164"+
    "\46\150\10\0\1\165\67\0\1\166\46\0\1\20\1\0"+
    "\1\20\2\0\4\20\1\167\1\0\13\20\17\0\1\20"+
    "\11\0\1\20\1\0\1\20\2\0\4\20\1\170\1\0"+
    "\13\20\17\0\1\20\11\0\1\20\1\0\1\20\2\0"+
    "\5\20\1\0\5\20\1\171\5\20\17\0\1\20\11\0"+
    "\1\20\1\0\1\20\2\0\5\20\1\0\5\20\1\172"+
    "\5\20\17\0\1\20\4\0\1\54\56\0\1\57\73\0"+
    "\1\173\35\0\10\150\1\174\46\150\10\0\1\175\70\0"+
    "\1\176\56\0\1\177\34\0\10\150\1\200\46\150\1\0"+
    "\4\176\16\0\1\201\34\0\4\177\16\0\1\202\43\0"+
    "\1\203\47\0\4\201\4\0\1\204\3\0\1\205\6\0"+
    "\1\206\33\0\4\202\62\0\1\11\57\0\1\204\12\0"+
    "\1\204\32\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4371];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\1\11\2\1\1\11\7\1\1\11\2\1\1\11"+
    "\7\1\7\11\7\1\1\11\1\1\1\0\1\11\1\1"+
    "\2\0\1\1\1\11\1\1\1\0\1\11\1\0\1\11"+
    "\1\0\1\1\3\0\12\1\7\11\4\0\1\1\4\0"+
    "\1\1\2\0\10\1\5\0\1\1\3\0\10\1\4\0"+
    "\4\1\2\0\1\1\2\0\1\1\1\0\3\1\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[134];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /** For the backwards DFA of general lookahead statements */
  private boolean [] zzFin = new boolean [ZZ_BUFFERSIZE+1];


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Yylex(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Yylex(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 130) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 34: 
          { return new Symbol(sym.IGUAL);
          }
        case 53: break;
        case 11: 
          { return new Symbol(sym.CC);
          }
        case 54: break;
        case 22: 
          { return new Symbol(sym.MOD);
          }
        case 55: break;
        case 32: 
          { return new Symbol(sym.DO);
          }
        case 56: break;
        case 49: 
          { return new Symbol(sym.RANGE);
          }
        case 57: break;
        case 18: 
          { return new Symbol(sym.ASIG);
          }
        case 58: break;
        case 30: 
          { return new Symbol(sym.IF);
          }
        case 59: break;
        case 50: 
          { return new Symbol(sym.WHILE);
          }
        case 60: break;
        case 12: 
          { return new Symbol(sym.AL);
          }
        case 61: break;
        case 35: 
          { return new Symbol(sym.MAYORIGUAL);
          }
        case 62: break;
        case 10: 
          { return new Symbol(sym.AC);
          }
        case 63: break;
        case 39: 
          { return new Symbol(sym.OR);
          }
        case 64: break;
        case 43: 
          { return new Symbol(sym.ELIF);
          }
        case 65: break;
        case 1: 
          { throw new Error("Illegal character <"+yytext()+">");
          }
        case 66: break;
        case 24: 
          { int seguir = Identacion.subIdentacionCero();
							if (seguir == 1) {
								yypushback(yylength());
								System.out.println("CERRANDO LLAVE");
								Identacion.flag = false;
								return new Symbol(sym.CL);						
							} else {
								yybegin(YYINITIAL);
							}
          }
        case 67: break;
        case 47: 
          { return new Symbol(sym.FLOAT);
          }
        case 68: break;
        case 33: 
          { return new Symbol(sym.MASMAS);
          }
        case 69: break;
        case 52: 
          // lookahead expression with fixed lookahead length
          yypushback(1);
          { return new Symbol(sym.CASTINGFLOATAEXPRESION);
          }
        case 70: break;
        case 48: 
          { return new Symbol(sym.PRINT);
          }
        case 71: break;
        case 14: 
          { return new Symbol(sym.PYC);
          }
        case 72: break;
        case 25: 
          { int seguir = Identacion.subIdentacionTab(yylength());
						  if (seguir==1){
							yypushback(yylength());
							Identacion.flag = false;
							return new Symbol(sym.CL);
						  } else {
							yybegin(YYINITIAL);
						  }
          }
        case 73: break;
        case 44: 
          { return new Symbol(sym.ELSE);
          }
        case 74: break;
        case 23: 
          { int aumentar = Identacion.identacionTab(yylength());
						  if (aumentar==1){
							yybegin(YYINITIAL);
							Identacion.flag = true;
							return new Symbol(sym.AL);
						  } else if (aumentar==-1) {
							yypushback(yylength());
							yybegin(CERRARLLAVE);
						  } else {
							yybegin(YYINITIAL);
						  }
          }
        case 75: break;
        case 45: 
          { int aumentar = Identacion.identacionEsp(yylength());
						  if (aumentar==1){
							yybegin(YYINITIAL);
							System.out.println("ABRIENDO LLAVE");
							Identacion.flag = true;
							return new Symbol(sym.AL);
						  } else if (aumentar==-1) {
							yypushback(yylength());
							yybegin(CERRARLLAVE);
						  } else {
							yybegin(YYINITIAL);
						  }
          }
        case 76: break;
        case 27: 
          { return new Symbol(sym.DIVINT);
          }
        case 77: break;
        case 46: 
          { int seguir = Identacion.subIdentacionEsp(yylength());
						  if (seguir==1){
							yypushback(yylength());
							System.out.println("CERRANDO LLAVE");
							Identacion.flag = false;
							return new Symbol(sym.CL);
						  } else {
							yybegin(YYINITIAL);
						  }
          }
        case 78: break;
        case 9: 
          { return new Symbol(sym.CP);
          }
        case 79: break;
        case 51: 
          // general lookahead, find correct zzMarkedPos
          { int zzFState = 3;
            int zzFPos = zzStartRead;
            if (zzFin.length <= zzBufferL.length) { zzFin = new boolean[zzBufferL.length+1]; }
            boolean zzFinL[] = zzFin;
            while (zzFState != -1 && zzFPos < zzMarkedPos) {
              if ((zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 
              zzInput = zzBufferL[zzFPos++];
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            }
            if (zzFState != -1 && (zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 

            zzFState = 4;
            zzFPos = zzMarkedPos;
            while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
              zzInput = zzBufferL[--zzFPos];
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            };
            zzMarkedPos = zzFPos;
          }
          { return new Symbol(sym.CASTINGFLOATAENTERO);
          }
        case 80: break;
        case 28: 
          { return new Symbol(sym.EXP);
          }
        case 81: break;
        case 17: 
          { return new Symbol(sym.MAS);
          }
        case 82: break;
        case 4: 
          { return new Symbol(sym.POR);
          }
        case 83: break;
        case 15: 
          { return new Symbol(sym.COMA);
          }
        case 84: break;
        case 5: 
          { return new Symbol(sym.ENTERO, yytext());
          }
        case 85: break;
        case 40: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { yybegin(IDENTACION);
          }
        case 86: break;
        case 36: 
          { return new Symbol(sym.MENORIGUAL);
          }
        case 87: break;
        case 8: 
          { return new Symbol(sym.AP);
          }
        case 88: break;
        case 26: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { yypushback(1); yybegin(CERRARLLAVE);
          }
        case 89: break;
        case 37: 
          { return new Symbol(sym.DIF);
          }
        case 90: break;
        case 7: 
          { return new Symbol(sym.MENOS);
          }
        case 91: break;
        case 42: 
          { return new Symbol(sym.INT);
          }
        case 92: break;
        case 19: 
          { return new Symbol(sym.MAYOR);
          }
        case 93: break;
        case 38: 
          { return new Symbol(sym.AND);
          }
        case 94: break;
        case 31: 
          { return new Symbol(sym.IN, new BloqueCond());
          }
        case 95: break;
        case 21: 
          { return new Symbol(sym.NOT);
          }
        case 96: break;
        case 16: 
          { return new Symbol(sym.DP);
          }
        case 97: break;
        case 20: 
          { return new Symbol(sym.MENOR);
          }
        case 98: break;
        case 3: 
          { return new Symbol(sym.DIV);
          }
        case 99: break;
        case 13: 
          { return new Symbol(sym.CL);
          }
        case 100: break;
        case 6: 
          { return new Symbol(sym.IDENT, yytext());
          }
        case 101: break;
        case 41: 
          { return new Symbol(sym.FOR, new EtiquetaFor());
          }
        case 102: break;
        case 2: 
          { 
          }
        case 103: break;
        case 29: 
          { return new Symbol(sym.REAL, yytext());
          }
        case 104: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
