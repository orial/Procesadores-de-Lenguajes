
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Feb 08 09:40:45 PST 2016
//----------------------------------------------------

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Feb 08 09:40:45 PST 2016
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\060\000\002\004\004\000\002\002\004\000\002\004" +
    "\002\000\002\002\003\000\002\007\002\000\002\010\002" +
    "\000\002\002\011\000\002\002\004\000\002\002\005\000" +
    "\002\011\002\000\002\012\002\000\002\013\002\000\002" +
    "\002\016\000\002\014\002\000\002\002\016\000\002\015" +
    "\002\000\002\016\002\000\002\002\010\000\002\006\003" +
    "\000\002\006\003\000\002\006\005\000\002\006\005\000" +
    "\002\006\005\000\002\006\005\000\002\006\005\000\002" +
    "\006\005\000\002\006\005\000\002\006\005\000\002\006" +
    "\004\000\002\006\005\000\002\006\005\000\002\003\005" +
    "\000\002\017\002\000\002\020\002\000\002\003\011\000" +
    "\002\003\002\000\002\005\005\000\002\005\005\000\002" +
    "\005\005\000\002\005\005\000\002\005\005\000\002\005" +
    "\005\000\002\005\004\000\002\021\002\000\002\005\006" +
    "\000\002\022\002\000\002\005\006\000\002\005\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\152\000\026\002\uffff\005\uffff\014\uffff\020\uffff\022" +
    "\uffff\024\uffff\025\uffff\047\uffff\053\uffff\056\uffff\001\002" +
    "\000\026\002\014\005\010\014\020\020\006\022\005\024" +
    "\017\025\015\047\007\053\012\056\011\001\002\000\014" +
    "\005\ufff2\014\ufff2\037\ufff2\047\ufff2\053\ufff2\001\002\000" +
    "\026\005\uffff\014\uffff\020\uffff\021\uffff\022\uffff\024\uffff" +
    "\025\uffff\047\uffff\053\uffff\056\uffff\001\002\000\104\002" +
    "\uffef\004\uffef\005\uffef\006\uffef\007\uffef\011\uffef\012\uffef" +
    "\013\uffef\014\uffef\015\uffef\020\uffef\021\uffef\022\uffef\024" +
    "\uffef\025\uffef\026\uffef\027\uffef\030\uffef\031\uffef\032\uffef" +
    "\033\uffef\034\uffef\035\uffef\036\144\040\uffef\041\uffef\042" +
    "\uffef\043\uffef\044\uffef\047\uffef\053\uffef\055\uffef\056\uffef" +
    "\001\002\000\012\005\010\014\020\047\007\053\012\001" +
    "\002\000\012\005\010\014\115\047\007\053\012\001\002" +
    "\000\104\002\uffee\004\uffee\005\uffee\006\uffee\007\uffee\011" +
    "\uffee\012\uffee\013\uffee\014\uffee\015\uffee\020\uffee\021\uffee" +
    "\022\uffee\024\uffee\025\uffee\026\uffee\027\uffee\030\uffee\031" +
    "\uffee\032\uffee\033\uffee\034\uffee\035\uffee\036\uffee\040\uffee" +
    "\041\uffee\042\uffee\043\uffee\044\uffee\047\uffee\053\uffee\055" +
    "\uffee\056\uffee\001\002\000\052\002\ufffe\004\026\005\022" +
    "\006\025\007\030\011\031\012\024\013\032\014\ufffe\020" +
    "\ufffe\021\ufffe\022\ufffe\024\ufffe\025\ufffe\026\ufffe\027\ufffe" +
    "\036\027\047\ufffe\053\ufffe\056\ufffe\001\002\000\004\002" +
    "\000\001\002\000\014\005\010\014\045\037\044\047\007" +
    "\053\012\001\002\000\030\002\001\005\001\014\001\020" +
    "\001\021\001\022\001\024\001\025\001\047\001\053\001" +
    "\056\001\001\002\000\012\005\010\014\020\047\007\053" +
    "\012\001\002\000\012\005\010\014\020\047\007\053\012" +
    "\001\002\000\024\004\026\005\022\006\025\007\030\011" +
    "\031\012\024\013\032\015\023\036\027\001\002\000\012" +
    "\005\010\014\020\047\007\053\012\001\002\000\104\002" +
    "\uffe4\004\uffe4\005\uffe4\006\uffe4\007\uffe4\011\uffe4\012\uffe4" +
    "\013\uffe4\014\uffe4\015\uffe4\020\uffe4\021\uffe4\022\uffe4\024" +
    "\uffe4\025\uffe4\026\uffe4\027\uffe4\030\uffe4\031\uffe4\032\uffe4" +
    "\033\uffe4\034\uffe4\035\uffe4\036\uffe4\040\uffe4\041\uffe4\042" +
    "\uffe4\043\uffe4\044\uffe4\047\uffe4\053\uffe4\055\uffe4\056\uffe4" +
    "\001\002\000\012\005\010\014\020\047\007\053\012\001" +
    "\002\000\012\005\010\014\020\047\007\053\012\001\002" +
    "\000\012\005\010\014\020\047\007\053\012\001\002\000" +
    "\012\005\010\014\020\047\007\053\012\001\002\000\012" +
    "\005\010\014\020\047\007\053\012\001\002\000\012\005" +
    "\010\014\020\047\007\053\012\001\002\000\012\005\010" +
    "\014\020\047\007\053\012\001\002\000\104\002\uffe9\004" +
    "\uffe9\005\uffe9\006\uffe9\007\uffe9\011\031\012\uffe9\013\uffe9" +
    "\014\uffe9\015\uffe9\020\uffe9\021\uffe9\022\uffe9\024\uffe9\025" +
    "\uffe9\026\uffe9\027\uffe9\030\uffe9\031\uffe9\032\uffe9\033\uffe9" +
    "\034\uffe9\035\uffe9\036\uffe9\040\uffe9\041\uffe9\042\uffe9\043" +
    "\uffe9\044\uffe9\047\uffe9\053\uffe9\055\uffe9\056\uffe9\001\002" +
    "\000\104\002\uffe7\004\uffe7\005\uffe7\006\uffe7\007\uffe7\011" +
    "\uffe7\012\uffe7\013\uffe7\014\uffe7\015\uffe7\020\uffe7\021\uffe7" +
    "\022\uffe7\024\uffe7\025\uffe7\026\uffe7\027\uffe7\030\uffe7\031" +
    "\uffe7\032\uffe7\033\uffe7\034\uffe7\035\uffe7\036\uffe7\040\uffe7" +
    "\041\uffe7\042\uffe7\043\uffe7\044\uffe7\047\uffe7\053\uffe7\055" +
    "\uffe7\056\uffe7\001\002\000\104\002\uffea\004\uffea\005\uffea" +
    "\006\uffea\007\uffea\011\031\012\uffea\013\uffea\014\uffea\015" +
    "\uffea\020\uffea\021\uffea\022\uffea\024\uffea\025\uffea\026\uffea" +
    "\027\uffea\030\uffea\031\uffea\032\uffea\033\uffea\034\uffea\035" +
    "\uffea\036\uffea\040\uffea\041\uffea\042\uffea\043\uffea\044\uffea" +
    "\047\uffea\053\uffea\055\uffea\056\uffea\001\002\000\104\002" +
    "\uffe8\004\026\005\022\006\025\007\030\011\031\012\024" +
    "\013\032\014\uffe8\015\uffe8\020\uffe8\021\uffe8\022\uffe8\024" +
    "\uffe8\025\uffe8\026\uffe8\027\uffe8\030\uffe8\031\uffe8\032\uffe8" +
    "\033\uffe8\034\uffe8\035\uffe8\036\uffe8\040\uffe8\041\uffe8\042" +
    "\uffe8\043\uffe8\044\uffe8\047\uffe8\053\uffe8\055\uffe8\056\uffe8" +
    "\001\002\000\104\002\uffed\004\uffed\005\uffed\006\025\007" +
    "\030\011\031\012\024\013\032\014\uffed\015\uffed\020\uffed" +
    "\021\uffed\022\uffed\024\uffed\025\uffed\026\uffed\027\uffed\030" +
    "\uffed\031\uffed\032\uffed\033\uffed\034\uffed\035\uffed\036\uffed" +
    "\040\uffed\041\uffed\042\uffed\043\uffed\044\uffed\047\uffed\053" +
    "\uffed\055\uffed\056\uffed\001\002\000\104\002\uffeb\004\uffeb" +
    "\005\uffeb\006\uffeb\007\uffeb\011\031\012\uffeb\013\uffeb\014" +
    "\uffeb\015\uffeb\020\uffeb\021\uffeb\022\uffeb\024\uffeb\025\uffeb" +
    "\026\uffeb\027\uffeb\030\uffeb\031\uffeb\032\uffeb\033\uffeb\034" +
    "\uffeb\035\uffeb\036\uffeb\040\uffeb\041\uffeb\042\uffeb\043\uffeb" +
    "\044\uffeb\047\uffeb\053\uffeb\055\uffeb\056\uffeb\001\002\000" +
    "\104\002\uffe6\004\uffe6\005\uffe6\006\uffe6\007\uffe6\011\031" +
    "\012\uffe6\013\uffe6\014\uffe6\015\uffe6\020\uffe6\021\uffe6\022" +
    "\uffe6\024\uffe6\025\uffe6\026\uffe6\027\uffe6\030\uffe6\031\uffe6" +
    "\032\uffe6\033\uffe6\034\uffe6\035\uffe6\036\uffe6\040\uffe6\041" +
    "\uffe6\042\uffe6\043\uffe6\044\uffe6\047\uffe6\053\uffe6\055\uffe6" +
    "\056\uffe6\001\002\000\104\002\uffec\004\uffec\005\uffec\006" +
    "\025\007\030\011\031\012\024\013\032\014\uffec\015\uffec" +
    "\020\uffec\021\uffec\022\uffec\024\uffec\025\uffec\026\uffec\027" +
    "\uffec\030\uffec\031\uffec\032\uffec\033\uffec\034\uffec\035\uffec" +
    "\036\uffec\040\uffec\041\uffec\042\uffec\043\uffec\044\uffec\047" +
    "\uffec\053\uffec\055\uffec\056\uffec\001\002\000\052\002\ufffa" +
    "\004\026\005\022\006\025\007\030\011\031\012\024\013" +
    "\032\014\ufffa\020\ufffa\021\ufffa\022\ufffa\024\ufffa\025\ufffa" +
    "\026\ufffa\027\ufffa\036\027\047\ufffa\053\ufffa\056\ufffa\001" +
    "\002\000\014\005\010\014\045\037\044\047\007\053\012" +
    "\001\002\000\014\005\010\014\045\037\044\047\007\053" +
    "\012\001\002\000\010\040\065\041\066\044\064\001\002" +
    "\000\036\004\026\005\022\006\025\007\030\011\031\012" +
    "\024\013\032\030\055\031\054\032\051\033\053\034\050" +
    "\035\052\036\027\001\002\000\012\005\010\014\020\047" +
    "\007\053\012\001\002\000\012\005\010\014\020\047\007" +
    "\053\012\001\002\000\012\005\010\014\020\047\007\053" +
    "\012\001\002\000\012\005\010\014\020\047\007\053\012" +
    "\001\002\000\012\005\010\014\020\047\007\053\012\001" +
    "\002\000\012\005\010\014\020\047\007\053\012\001\002" +
    "\000\034\004\026\005\022\006\025\007\030\011\031\012" +
    "\024\013\032\015\uffd9\036\027\040\uffd9\041\uffd9\042\uffd9" +
    "\044\uffd9\001\002\000\034\004\026\005\022\006\025\007" +
    "\030\011\031\012\024\013\032\015\uffdd\036\027\040\uffdd" +
    "\041\uffdd\042\uffdd\044\uffdd\001\002\000\034\004\026\005" +
    "\022\006\025\007\030\011\031\012\024\013\032\015\uffdb" +
    "\036\027\040\uffdb\041\uffdb\042\uffdb\044\uffdb\001\002\000" +
    "\034\004\026\005\022\006\025\007\030\011\031\012\024" +
    "\013\032\015\uffd8\036\027\040\uffd8\041\uffd8\042\uffd8\044" +
    "\uffd8\001\002\000\034\004\026\005\022\006\025\007\030" +
    "\011\031\012\024\013\032\015\uffdc\036\027\040\uffdc\041" +
    "\uffdc\042\uffdc\044\uffdc\001\002\000\034\004\026\005\022" +
    "\006\025\007\030\011\031\012\024\013\032\015\uffda\036" +
    "\027\040\uffda\041\uffda\042\uffda\044\uffda\001\002\000\024" +
    "\005\ufffd\014\ufffd\020\ufffd\022\ufffd\024\ufffd\025\ufffd\047" +
    "\ufffd\053\ufffd\056\ufffd\001\002\000\014\005\uffd6\014\uffd6" +
    "\037\uffd6\047\uffd6\053\uffd6\001\002\000\014\005\uffd4\014" +
    "\uffd4\037\uffd4\047\uffd4\053\uffd4\001\002\000\014\005\010" +
    "\014\045\037\044\047\007\053\012\001\002\000\014\015" +
    "\uffd3\040\065\041\uffd3\042\uffd3\044\uffd3\001\002\000\014" +
    "\005\010\014\045\037\044\047\007\053\012\001\002\000" +
    "\014\015\uffd5\040\uffd5\041\uffd5\042\uffd5\044\uffd5\001\002" +
    "\000\024\005\010\014\020\020\006\022\005\024\017\025" +
    "\015\047\007\053\012\056\011\001\002\000\034\002\ufffc" +
    "\005\ufffc\014\ufffc\020\ufffc\021\ufffc\022\ufffc\024\ufffc\025" +
    "\ufffc\026\ufffc\027\ufffc\047\ufffc\053\ufffc\056\ufffc\001\002" +
    "\000\034\002\uffde\005\uffde\014\uffde\020\uffde\021\uffde\022" +
    "\uffde\024\uffde\025\uffde\026\076\027\077\047\uffde\053\uffde" +
    "\056\uffde\001\002\000\004\044\107\001\002\000\014\005" +
    "\010\014\045\037\044\047\007\053\012\001\002\000\034" +
    "\002\ufffb\005\ufffb\014\ufffb\020\ufffb\021\ufffb\022\ufffb\024" +
    "\ufffb\025\ufffb\026\ufffb\027\ufffb\047\ufffb\053\ufffb\056\ufffb" +
    "\001\002\000\010\040\065\041\066\044\102\001\002\000" +
    "\024\005\uffe1\014\uffe1\020\uffe1\022\uffe1\024\uffe1\025\uffe1" +
    "\047\uffe1\053\uffe1\056\uffe1\001\002\000\024\005\010\014" +
    "\020\020\006\022\005\024\017\025\015\047\007\053\012" +
    "\056\011\001\002\000\034\002\uffe0\005\uffe0\014\uffe0\020" +
    "\uffe0\021\uffe0\022\uffe0\024\uffe0\025\uffe0\026\uffe0\027\uffe0" +
    "\047\uffe0\053\uffe0\056\uffe0\001\002\000\034\002\uffde\005" +
    "\uffde\014\uffde\020\uffde\021\uffde\022\uffde\024\uffde\025\uffde" +
    "\026\076\027\077\047\uffde\053\uffde\056\uffde\001\002\000" +
    "\034\002\uffdf\005\uffdf\014\uffdf\020\uffdf\021\uffdf\022\uffdf" +
    "\024\uffdf\025\uffdf\026\uffdf\027\uffdf\047\uffdf\053\uffdf\056" +
    "\uffdf\001\002\000\024\005\010\014\020\020\006\022\005" +
    "\024\017\025\015\047\007\053\012\056\011\001\002\000" +
    "\034\002\uffe2\005\uffe2\014\uffe2\020\uffe2\021\uffe2\022\uffe2" +
    "\024\uffe2\025\uffe2\026\uffe2\027\uffe2\047\uffe2\053\uffe2\056" +
    "\uffe2\001\002\000\010\015\113\040\065\041\066\001\002" +
    "\000\040\004\026\005\022\006\025\007\030\011\031\012" +
    "\024\013\032\015\023\030\055\031\054\032\051\033\053" +
    "\034\050\035\052\036\027\001\002\000\014\015\uffd2\040" +
    "\uffd2\041\uffd2\042\uffd2\044\uffd2\001\002\000\014\015\uffd7" +
    "\040\uffd7\041\uffd7\042\uffd7\044\uffd7\001\002\000\012\005" +
    "\010\014\020\047\007\053\012\001\002\000\024\004\026" +
    "\005\022\006\025\007\030\011\031\012\024\013\032\036" +
    "\027\055\117\001\002\000\004\052\120\001\002\000\004" +
    "\014\121\001\002\000\012\005\010\014\020\047\007\053" +
    "\012\001\002\000\024\004\026\005\022\006\025\007\030" +
    "\011\031\012\024\013\032\036\027\043\123\001\002\000" +
    "\012\005\010\014\020\047\007\053\012\001\002\000\024" +
    "\004\026\005\022\006\025\007\030\011\031\012\024\013" +
    "\032\015\125\036\027\001\002\000\004\044\126\001\002" +
    "\000\024\005\ufff4\014\ufff4\020\ufff4\022\ufff4\024\ufff4\025" +
    "\ufff4\047\ufff4\053\ufff4\056\ufff4\001\002\000\024\005\010" +
    "\014\020\020\006\022\005\024\017\025\015\047\007\053" +
    "\012\056\011\001\002\000\034\002\ufff3\005\ufff3\014\ufff3" +
    "\020\ufff3\021\ufff3\022\ufff3\024\ufff3\025\ufff3\026\ufff3\027" +
    "\ufff3\047\ufff3\053\ufff3\056\ufff3\001\002\000\026\004\026" +
    "\005\022\006\025\007\030\011\031\012\024\013\032\015" +
    "\023\036\027\042\ufff8\001\002\000\004\042\133\001\002" +
    "\000\014\005\010\014\045\037\044\047\007\053\012\001" +
    "\002\000\010\040\065\041\066\042\135\001\002\000\012" +
    "\005\ufff7\014\ufff7\047\ufff7\053\ufff7\001\002\000\012\005" +
    "\010\014\020\047\007\053\012\001\002\000\024\004\026" +
    "\005\022\006\025\007\030\011\031\012\024\013\032\015" +
    "\140\036\027\001\002\000\024\005\ufff6\014\ufff6\020\ufff6" +
    "\022\ufff6\024\ufff6\025\ufff6\047\ufff6\053\ufff6\056\ufff6\001" +
    "\002\000\024\005\010\014\020\020\006\022\005\024\017" +
    "\025\015\047\007\053\012\056\011\001\002\000\034\002" +
    "\ufff5\005\ufff5\014\ufff5\020\ufff5\021\ufff5\022\ufff5\024\ufff5" +
    "\025\ufff5\026\ufff5\027\ufff5\047\ufff5\053\ufff5\056\ufff5\001" +
    "\002\000\104\002\uffe5\004\uffe5\005\uffe5\006\025\007\030" +
    "\011\031\012\024\013\032\014\uffe5\015\uffe5\020\uffe5\021" +
    "\uffe5\022\uffe5\024\uffe5\025\uffe5\026\uffe5\027\uffe5\030\uffe5" +
    "\031\uffe5\032\uffe5\033\uffe5\034\uffe5\035\uffe5\036\uffe5\040" +
    "\uffe5\041\uffe5\042\uffe5\043\uffe5\044\uffe5\047\uffe5\053\uffe5" +
    "\055\uffe5\056\uffe5\001\002\000\012\005\010\014\020\047" +
    "\007\053\012\001\002\000\104\002\uffe3\004\026\005\022" +
    "\006\025\007\030\011\031\012\024\013\032\014\uffe3\015" +
    "\uffe3\020\uffe3\021\uffe3\022\uffe3\024\uffe3\025\uffe3\026\uffe3" +
    "\027\uffe3\030\uffe3\031\uffe3\032\uffe3\033\uffe3\034\uffe3\035" +
    "\uffe3\036\uffe3\040\uffe3\041\uffe3\042\uffe3\043\uffe3\044\uffe3" +
    "\047\uffe3\053\uffe3\055\uffe3\056\uffe3\001\002\000\026\005" +
    "\010\014\020\020\006\021\147\022\005\024\017\025\015" +
    "\047\007\053\012\056\011\001\002\000\034\002\ufff9\005" +
    "\ufff9\014\ufff9\020\ufff9\021\ufff9\022\ufff9\024\ufff9\025\ufff9" +
    "\026\ufff9\027\ufff9\047\ufff9\053\ufff9\056\ufff9\001\002\000" +
    "\014\005\010\014\045\037\044\047\007\053\012\001\002" +
    "\000\010\040\065\041\066\044\152\001\002\000\024\005" +
    "\ufff1\014\ufff1\020\ufff1\022\ufff1\024\ufff1\025\ufff1\047\ufff1" +
    "\053\ufff1\056\ufff1\001\002\000\024\005\010\014\020\020" +
    "\006\022\005\024\017\025\015\047\007\053\012\056\011" +
    "\001\002\000\034\002\ufff0\005\ufff0\014\ufff0\020\ufff0\021" +
    "\ufff0\022\ufff0\024\ufff0\025\ufff0\026\ufff0\027\ufff0\047\ufff0" +
    "\053\ufff0\056\ufff0\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\152\000\004\004\003\001\001\000\006\002\015\006" +
    "\012\001\001\000\004\015\147\001\001\000\004\004\145" +
    "\001\001\000\002\001\001\000\004\006\142\001\001\000" +
    "\004\006\115\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\005\045\006\046\001\001\000" +
    "\002\001\001\000\004\006\042\001\001\000\004\006\020" +
    "\001\001\000\002\001\001\000\004\006\041\001\001\000" +
    "\002\001\001\000\004\006\040\001\001\000\004\006\037" +
    "\001\001\000\004\006\036\001\001\000\004\006\035\001" +
    "\001\000\004\006\034\001\001\000\004\006\033\001\001" +
    "\000\004\006\032\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\005\113\006\046\001\001\000\006" +
    "\005\110\006\111\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\006\062\001\001\000\004\006\061\001\001" +
    "\000\004\006\060\001\001\000\004\006\057\001\001\000" +
    "\004\006\056\001\001\000\004\006\055\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\007\072" +
    "\001\001\000\004\021\070\001\001\000\004\022\066\001" +
    "\001\000\006\005\067\006\046\001\001\000\002\001\001" +
    "\000\006\005\071\006\046\001\001\000\002\001\001\000" +
    "\006\002\073\006\012\001\001\000\004\010\074\001\001" +
    "\000\004\003\077\001\001\000\002\001\001\000\006\005" +
    "\100\006\046\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\017\102\001\001\000\006\002\103\006\012\001" +
    "\001\000\004\020\104\001\001\000\004\003\105\001\001" +
    "\000\002\001\001\000\006\002\107\006\012\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\130\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\121\001\001\000\002\001\001\000\004\006\123\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\014\126" +
    "\001\001\000\006\002\127\006\012\001\001\000\002\001" +
    "\001\000\004\011\131\001\001\000\002\001\001\000\006" +
    "\005\133\006\046\001\001\000\002\001\001\000\004\012" +
    "\135\001\001\000\004\006\136\001\001\000\002\001\001" +
    "\000\004\013\140\001\001\000\006\002\141\006\012\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\144" +
    "\001\001\000\002\001\001\000\006\002\015\006\012\001" +
    "\001\000\002\001\001\000\006\005\150\006\046\001\001" +
    "\000\002\001\001\000\004\016\152\001\001\000\006\002" +
    "\153\006\012\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // cond ::= AP cond CP 
            {
              BloqueCond RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		BloqueCond c1 = (BloqueCond)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = c1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // cond ::= cond OR NT$11 cond 
            {
              BloqueCond RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (BloqueCond) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		BloqueCond c1 = (BloqueCond)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BloqueCond c2 = (BloqueCond)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 PYPLC.out.println(c1.etqV + ":\n   goto " + c2.etqV + ";"); RESULT = c2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // NT$11 ::= 
            {
              BloqueCond RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		BloqueCond c1 = (BloqueCond)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 PYPLC.out.println(c1.etqF + ":"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$11",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // cond ::= cond AND NT$10 cond 
            {
              BloqueCond RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (BloqueCond) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		BloqueCond c1 = (BloqueCond)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BloqueCond c2 = (BloqueCond)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 PYPLC.out.println(c1.etqF + ":\n   goto " + c2.etqF + ";"); RESULT = c2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // NT$10 ::= 
            {
              BloqueCond RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		BloqueCond c1 = (BloqueCond)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 PYPLC.out.println(c1.etqV + ":"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // cond ::= NOT cond 
            {
              BloqueCond RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BloqueCond c = (BloqueCond)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BloqueCond(); RESULT.etqV = c.etqF; RESULT.etqF = c.etqV; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // cond ::= exp DIF exp 
            {
              BloqueCond RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Util.generarCondicion2(e1, "!=", e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // cond ::= exp IGUAL exp 
            {
              BloqueCond RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Util.generarCondicion(e1, "==", e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // cond ::= exp MENORIGUAL exp 
            {
              BloqueCond RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Util.generarCondicion2(e1, "<=", e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // cond ::= exp MAYORIGUAL exp 
            {
              BloqueCond RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Util.generarCondicion2(e1, ">=", e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // cond ::= exp MENOR exp 
            {
              BloqueCond RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Util.generarCondicion(e1, "<", e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // cond ::= exp MAYOR exp 
            {
              BloqueCond RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Util.generarCondicion(e1, ">", e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // opcional ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opcional",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // opcional ::= ELIF cond DP NT$8 sent NT$9 opcional 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		BloqueCond c = (BloqueCond)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 PYPLC.out.println(RESULT + ":"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opcional",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // NT$9 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		BloqueCond c = (BloqueCond)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 PYPLC.out.println("   goto " + RESULT + ";\n" + c.etqF + ":" ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NT$8 ::= 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		BloqueCond c = (BloqueCond)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 RESULT = Util.generarEtiq(); PYPLC.out.println(c.etqV + ":");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // opcional ::= ELSE DP sent 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opcional",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // exp ::= IDENT ASIG exp 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = id; PYPLC.out.println("   " + id + " = " + e + ";"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // exp ::= AP exp CP 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // exp ::= MENOS exp 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Util.nuevoTemporal(); PYPLC.out.println("   " + RESULT + " = -" + e1 + ";"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // exp ::= exp MOD exp 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Util.modulo(e1,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // exp ::= exp EXP exp 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Util.elevar(e1,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // exp ::= exp ASIG exp 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Util.nuevoTemporal(); PYPLC.out.println("   " + RESULT + " = " + e1 + " / " + e2 + ";"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // exp ::= exp DIVINT exp 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Util.nuevoTemporal(); PYPLC.out.println("   " + RESULT + " = " + e1 + " / " + e2 + ";"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // exp ::= exp DIV exp 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Util.nuevoTemporal(); PYPLC.out.println("   " + RESULT + " = " + e1 + " / " + e2 + ";"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // exp ::= exp POR exp 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Util.nuevoTemporal(); PYPLC.out.println("   " + RESULT + " = " + e1 + " * " + e2 + ";"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // exp ::= exp MENOS exp 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Util.nuevoTemporal(); PYPLC.out.println("   " + RESULT + " = " + e1 + " - " + e2 + ";"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // exp ::= exp MAS exp 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Util.nuevoTemporal(); PYPLC.out.println("   " + RESULT + " = " + e1 + " + " + e2 + ";"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // exp ::= ENTERO 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // exp ::= IDENT 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = id; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // sent ::= WHILE NT$6 cond DP NT$7 sent 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		BloqueCond c = (BloqueCond)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 PYPLC.out.println("   goto " + RESULT + ";\n" + c.etqF + ":"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NT$7 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		BloqueCond c = (BloqueCond)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 PYPLC.out.println(c.etqV + ":"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NT$6 ::= 
            {
              Object RESULT =null;
 RESULT = Util.generarEtiq(); PYPLC.out.println(RESULT+":");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // sent ::= FOR exp IN RANGE AP exp COMA exp CP DP NT$5 sent 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int inicleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int inicright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		EtiquetaFor inic = (EtiquetaFor)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		BloqueCond c = (BloqueCond)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
			PYPLC.out.println("   goto " + RESULT + ";\n" + c.etqF + ":");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NT$5 ::= 
            {
              Object RESULT =null;
		int inicleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int inicright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		EtiquetaFor inic = (EtiquetaFor)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		BloqueCond c = (BloqueCond)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
 	PYPLC.out.println("   " + e1 + " = " + e2 + ";");
											inic.setEtiqueta(Util.generarEtiq());
											c.etqV = Util.generarEtiq();
											c.etqF = Util.generarEtiq();
											RESULT = Util.generarEtiq();
											PYPLC.out.println(inic.getEtiqueta() + ":");
											PYPLC.out.println("   if (" + e1 + " < " + e3 + " ) goto " + c.etqV + ";");
											PYPLC.out.println("   goto " + c.etqF + ";\n" + RESULT + ":");
											String tmp = Util.nuevoTemporal();
											PYPLC.out.println("   " + tmp + " = " + e1 + " + 1;\n   " + e1 + " = " + tmp + ";");
											PYPLC.out.println("   goto " + inic.getEtiqueta() + ";\n" + c.etqV + ":");
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // sent ::= FOR AP exp NT$2 PYC cond PYC NT$3 exp CP NT$4 sent 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int etqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int etqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		EtiquetaFor etq = (EtiquetaFor)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		BloqueCond c = (BloqueCond)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		 PYPLC.out.println("   goto " + RESULT + ";\n" + c.etqF + ":"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$4 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int etqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int etqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		EtiquetaFor etq = (EtiquetaFor)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		BloqueCond c = (BloqueCond)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
 PYPLC.out.println("   goto " + etq.getEtiqueta() + ";\n" + c.etqV + ":"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NT$3 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int etqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int etqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		EtiquetaFor etq = (EtiquetaFor)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		BloqueCond c = (BloqueCond)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 RESULT = Util.generarEtiq(); PYPLC.out.println(RESULT+":"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NT$2 ::= 
            {
              Object RESULT =null;
		int etqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int etqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		EtiquetaFor etq = (EtiquetaFor)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
 etq.setEtiqueta(Util.generarEtiq()); PYPLC.out.println(etq.getEtiqueta() + ":"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // sent ::= AL prog CL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // sent ::= PRINT exp 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 PYPLC.out.println("   print " + e1 + ";"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // sent ::= IF cond DP NT$0 sent NT$1 opcional 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		BloqueCond c = (BloqueCond)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 PYPLC.out.println(RESULT + ":"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		BloqueCond c = (BloqueCond)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 PYPLC.out.println("   goto " + RESULT + ";\n" + c.etqF + ":" ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // NT$0 ::= 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		BloqueCond c = (BloqueCond)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 RESULT = Util.generarEtiq(); PYPLC.out.println(c.etqV + ":");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // sent ::= exp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // prog ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("prog",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= prog EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // prog ::= prog sent 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("prog",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

