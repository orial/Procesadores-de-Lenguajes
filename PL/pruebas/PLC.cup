import java_cup.runtime.*;

/*Terminales */

terminal            MAS, MENOS, POR, DIV, ASIG, MENOSUNARIO, NOT;
terminal            AP, CP, AK, CK, PYC;
terminal     String IDENT; 
terminal    Integer NUMERO;
terminal     Double NUMEROF;
terminal            PRINT;
terminal     String IF;
terminal            ELSE;
terminal            MEN, MAY, MENIG, MAYIG;
terminal            IG, NIG;
terminal            AND;
terminal            OR;
terminal     String DO;
terminal     String WHILE;
terminal     String FOR;

/* Non terminales */

non terminal        lista_de_sent;
non terminal        sentencia;
non terminal String expresion;
non terminal    Tag cond; 
non terminal        elsePart;

/* Precedencia */

precedence  left MAS, MENOS;
precedence  left POR, DIV;
precedence  left MENOSUNARIO;
precedence  left AND, OR;
precedence  left IF;
precedence  left ELSE;
precedence right NOT;

/* Gramatica */

lista_de_sent       ::= 	sentencia
			       	|  	lista_de_sent sentencia
			        ;
sentencia		   ::= 	expresion:e PYC                 	{: :}
          // PRINT
	 				|	PRINT AP expresion:e CP PYC		    {: Generador.print(e); :}
	 	  // Anonymous block
	 				|	AK lista_de_sent CK			        {: :}
		  // IF - ELSE (optional)
					|	IF:finIf AP cond:c CP            	{: Generador.label(c.getV()); :}	
                        sentencia                           {: Generador.goTo(finIf); Generador.label(c.getF()); :}       
                        elsePart			                {: Generador.label(finIf); :}
		  // WHILE
					|	WHILE:inWhile   		            {: Generador.label(inWhile); :}                                 
			            AP cond:c CP   		                {: Generador.label(c.getV()); :}
			            sentencia                			{: Generador.goTo(inWhile); Generador.label(c.getF()); :}
		  // DO WHILE
					|	DO:inDo			                    {: Generador.label(inDo); :}
            			sentencia WHILE AP cond:c CP PYC	{: Generador.label(c.getV()); Generador.goTo(inDo); Generador.label(c.getF());	:}
		  // FOR
					|	FOR:inFor AP expresion:e1 PYC	    {: Generador.label(inFor);	:}
			            cond:c1 PYC	                		{: RESULT = Generador.getTag();	Generador.label(RESULT.toString()); :}
			            expresion:e2 CP	            		{: Generador.goTo(inFor); Generador.label(c1.getV()); :}
			            sentencia	            			{: Generador.goTo(RESULT.toString()); Generador.label(c1.getF()); :}
	 				;
elsePart 	       ::= 	ELSE sentencia                      %prec ELSE
	   	            |  /* EPSILON */                      	%prec IF
	   	             ;
expresion   	   ::=	expresion:e1 MAS expresion:e2       {: RESULT = Generador.aritmetica(e1 + " + " + e2); :}		
		            |	expresion:e1 MENOS expresion:e2     {: RESULT = Generador.aritmetica(e1 + " - " + e2); :}
		            |	expresion:e1 POR expresion:e2       {: RESULT = Generador.aritmetica(e1 + " * " + e2); :}
		            | 	expresion:e1 DIV expresion:e2       {: RESULT = Generador.aritmetica(e1 + " / " + e2); :}
		            | 	MENOS expresion:e		            {: RESULT = Generador.aritmetica(" -" + e); :}                 %prec MENOSUNARIO
		            | 	AP expresion:e CP	                {: RESULT = e; :}       
                    |	IDENT:i ASIG expresion:e		    {: RESULT = Generador.asignacion(i, e); :}
                    |	IDENT:i			                	{: RESULT = i; :}
                    |  	NUMERO:n                            {: RESULT = n.toString(); :}
                    |	NUMEROF:n			                {: RESULT = n.toString(); :}
                    ;
cond     	       ::=	expresion:e1 IG expresion:e2		{: RESULT = Generador.condicion(e1, Tag.IG, e2); :}
		            |	expresion:e1 NIG expresion:e2		{: RESULT = Generador.condicion(e1, Tag.NIG, e2); :}
		            | 	expresion:e1 MEN expresion:e2		{: RESULT = Generador.condicion(e1, Tag.MEN, e2); :}
		            |	expresion:e1 MENIG expresion:e2		{: RESULT = Generador.condicion(e1, Tag.MENIG, e2); :} 
		            | 	expresion:e1 MAY expresion:e2		{: RESULT = Generador.condicion(e1, Tag.MAY, e2); :}
		            | 	expresion:e1 MAYIG expresion:e2		{: RESULT = Generador.condicion(e1, Tag.MAYIG, e2); :}
                    |	NOT cond:c			                {:
								                               String temp = c.getV();
								                               c.setV(c.getF());
								                               c.setF(temp);
								                               RESULT = c;
							                                :}
                    | 	cond:c1 AND			                {: Generador.label(c1.getV()); :}
			          	cond:c2				                {: Generador.label(c1.getF()); Generador.goTo(c2.getV()); RESULT = c2; :}
		            | 	cond:c1 OR			                {: Generador.label(c1.getF()); :}
			          	cond:c2				                {: Generador.label(c1.getV()); Generador.goTo(c2.getF()); RESULT = c2; :}
                    |	AP cond:c CP		    	        {: RESULT = c; :}
		            ;
