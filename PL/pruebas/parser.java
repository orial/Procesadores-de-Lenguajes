
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150930 (SVN rev 66)
//----------------------------------------------------

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150930 (SVN rev 66) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\052\000\002\002\003\000\002\002\004\000\002\002" +
    "\004\000\002\003\004\000\002\003\007\000\002\003\005" +
    "\000\002\007\002\000\002\010\002\000\002\003\012\000" +
    "\002\011\002\000\002\012\002\000\002\003\011\000\002" +
    "\013\002\000\002\003\012\000\002\014\002\000\002\015" +
    "\002\000\002\016\002\000\002\003\016\000\002\006\004" +
    "\000\002\006\002\000\002\004\005\000\002\004\005\000" +
    "\002\004\005\000\002\004\005\000\002\004\004\000\002" +
    "\004\005\000\002\004\005\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\005\005\000\002\005\005" +
    "\000\002\005\005\000\002\005\005\000\002\005\005\000" +
    "\002\005\005\000\002\005\004\000\002\017\002\000\002" +
    "\005\006\000\002\020\002\000\002\005\006\000\002\005" +
    "\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\137\000\030\005\010\013\017\015\006\020\005\021" +
    "\013\022\021\023\015\024\012\036\020\037\004\040\007" +
    "\001\002\000\004\013\ufff8\001\002\000\040\004\uffe6\005" +
    "\uffe6\006\uffe6\007\uffe6\010\132\014\uffe6\017\uffe6\026\uffe6" +
    "\027\uffe6\030\uffe6\031\uffe6\032\uffe6\033\uffe6\034\uffe6\035" +
    "\uffe6\001\002\000\030\005\010\013\017\015\006\020\005" +
    "\021\013\022\021\023\015\024\012\036\020\037\004\040" +
    "\007\001\002\000\004\013\115\001\002\000\014\005\010" +
    "\013\017\020\005\021\013\022\021\001\002\000\034\002" +
    "\001\005\001\013\001\015\001\016\001\020\001\021\001" +
    "\022\001\023\001\024\001\036\001\037\001\040\001\001" +
    "\002\000\004\013\103\001\002\000\036\004\uffe5\005\uffe5" +
    "\006\uffe5\007\uffe5\014\uffe5\017\uffe5\026\uffe5\027\uffe5\030" +
    "\uffe5\031\uffe5\032\uffe5\033\uffe5\034\uffe5\035\uffe5\001\002" +
    "\000\014\004\040\005\032\006\035\007\042\017\102\001" +
    "\002\000\004\013\076\001\002\000\032\002\075\005\010" +
    "\013\017\015\006\020\005\021\013\022\021\023\015\024" +
    "\012\036\020\037\004\040\007\001\002\000\014\005\010" +
    "\013\017\020\005\021\013\022\021\001\002\000\030\005" +
    "\ufff5\013\ufff5\015\ufff5\020\ufff5\021\ufff5\022\ufff5\023\ufff5" +
    "\024\ufff5\036\ufff5\037\ufff5\040\ufff5\001\002\000\036\004" +
    "\uffe4\005\uffe4\006\uffe4\007\uffe4\014\uffe4\017\uffe4\026\uffe4" +
    "\027\uffe4\030\uffe4\031\uffe4\032\uffe4\033\uffe4\034\uffe4\035" +
    "\uffe4\001\002\000\030\005\010\013\017\015\006\020\005" +
    "\021\013\022\021\023\015\024\012\036\020\037\004\040" +
    "\007\001\002\000\004\037\024\001\002\000\004\013\025" +
    "\001\002\000\016\005\010\012\026\013\030\020\005\021" +
    "\013\022\021\001\002\000\016\005\010\012\026\013\030" +
    "\020\005\021\013\022\021\001\002\000\010\014\070\034" +
    "\061\035\063\001\002\000\016\005\010\012\026\013\030" +
    "\020\005\021\013\022\021\001\002\000\026\004\040\005" +
    "\032\006\035\007\042\026\036\027\034\030\043\031\033" +
    "\032\041\033\037\001\002\000\014\005\010\013\017\020" +
    "\005\021\013\022\021\001\002\000\014\005\010\013\017" +
    "\020\005\021\013\022\021\001\002\000\014\005\010\013" +
    "\017\020\005\021\013\022\021\001\002\000\014\005\010" +
    "\013\017\020\005\021\013\022\021\001\002\000\014\005" +
    "\010\013\017\020\005\021\013\022\021\001\002\000\014" +
    "\005\010\013\017\020\005\021\013\022\021\001\002\000" +
    "\014\005\010\013\017\020\005\021\013\022\021\001\002" +
    "\000\014\005\010\013\017\020\005\021\013\022\021\001" +
    "\002\000\014\005\010\013\017\020\005\021\013\022\021" +
    "\001\002\000\014\005\010\013\017\020\005\021\013\022" +
    "\021\001\002\000\022\004\040\005\032\006\035\007\042" +
    "\014\uffe0\017\uffe0\034\uffe0\035\uffe0\001\002\000\036\004" +
    "\uffea\005\uffea\006\uffea\007\uffea\014\uffea\017\uffea\026\uffea" +
    "\027\uffea\030\uffea\031\uffea\032\uffea\033\uffea\034\uffea\035" +
    "\uffea\001\002\000\022\004\040\005\032\006\035\007\042" +
    "\014\uffe3\017\uffe3\034\uffe3\035\uffe3\001\002\000\036\004" +
    "\uffed\005\uffed\006\035\007\042\014\uffed\017\uffed\026\uffed" +
    "\027\uffed\030\uffed\031\uffed\032\uffed\033\uffed\034\uffed\035" +
    "\uffed\001\002\000\022\004\040\005\032\006\035\007\042" +
    "\014\uffe2\017\uffe2\034\uffe2\035\uffe2\001\002\000\022\004" +
    "\040\005\032\006\035\007\042\014\uffe1\017\uffe1\034\uffe1" +
    "\035\uffe1\001\002\000\036\004\uffeb\005\uffeb\006\uffeb\007" +
    "\uffeb\014\uffeb\017\uffeb\026\uffeb\027\uffeb\030\uffeb\031\uffeb" +
    "\032\uffeb\033\uffeb\034\uffeb\035\uffeb\001\002\000\022\004" +
    "\040\005\032\006\035\007\042\014\uffdf\017\uffdf\034\uffdf" +
    "\035\uffdf\001\002\000\022\004\040\005\032\006\035\007" +
    "\042\014\uffde\017\uffde\034\uffde\035\uffde\001\002\000\036" +
    "\004\uffec\005\uffec\006\035\007\042\014\uffec\017\uffec\026" +
    "\uffec\027\uffec\030\uffec\031\uffec\032\uffec\033\uffec\034\uffec" +
    "\035\uffec\001\002\000\010\014\062\034\061\035\063\001" +
    "\002\000\030\004\040\005\032\006\035\007\042\014\060" +
    "\026\036\027\034\030\043\031\033\032\041\033\037\001" +
    "\002\000\036\004\uffe8\005\uffe8\006\uffe8\007\uffe8\014\uffe8" +
    "\017\uffe8\026\uffe8\027\uffe8\030\uffe8\031\uffe8\032\uffe8\033" +
    "\uffe8\034\uffe8\035\uffe8\001\002\000\016\005\uffdc\012\uffdc" +
    "\013\uffdc\020\uffdc\021\uffdc\022\uffdc\001\002\000\012\014" +
    "\uffd8\017\uffd8\034\uffd8\035\uffd8\001\002\000\016\005\uffda" +
    "\012\uffda\013\uffda\020\uffda\021\uffda\022\uffda\001\002\000" +
    "\016\005\010\012\026\013\030\020\005\021\013\022\021" +
    "\001\002\000\012\014\uffd9\017\uffd9\034\uffd9\035\uffd9\001" +
    "\002\000\016\005\010\012\026\013\030\020\005\021\013" +
    "\022\021\001\002\000\012\014\uffdb\017\uffdb\034\uffdb\035" +
    "\uffdb\001\002\000\004\017\071\001\002\000\036\002\ufff4" +
    "\005\ufff4\013\ufff4\015\ufff4\016\ufff4\020\ufff4\021\ufff4\022" +
    "\ufff4\023\ufff4\024\ufff4\025\ufff4\036\ufff4\037\ufff4\040\ufff4" +
    "\001\002\000\012\014\uffdd\017\uffdd\034\uffdd\035\uffdd\001" +
    "\002\000\014\004\040\005\032\006\035\007\042\014\060" +
    "\001\002\000\034\002\uffff\005\uffff\013\uffff\015\uffff\016" +
    "\uffff\020\uffff\021\uffff\022\uffff\023\uffff\024\uffff\036\uffff" +
    "\037\uffff\040\uffff\001\002\000\004\002\000\001\002\000" +
    "\014\005\010\013\017\020\005\021\013\022\021\001\002" +
    "\000\014\004\040\005\032\006\035\007\042\014\100\001" +
    "\002\000\004\017\101\001\002\000\036\002\ufffd\005\ufffd" +
    "\013\ufffd\015\ufffd\016\ufffd\020\ufffd\021\ufffd\022\ufffd\023" +
    "\ufffd\024\ufffd\025\ufffd\036\ufffd\037\ufffd\040\ufffd\001\002" +
    "\000\036\002\ufffe\005\ufffe\013\ufffe\015\ufffe\016\ufffe\020" +
    "\ufffe\021\ufffe\022\ufffe\023\ufffe\024\ufffe\025\ufffe\036\ufffe" +
    "\037\ufffe\040\ufffe\001\002\000\016\005\010\012\026\013" +
    "\030\020\005\021\013\022\021\001\002\000\010\014\105" +
    "\034\061\035\063\001\002\000\030\005\ufffb\013\ufffb\015" +
    "\ufffb\020\ufffb\021\ufffb\022\ufffb\023\ufffb\024\ufffb\036\ufffb" +
    "\037\ufffb\040\ufffb\001\002\000\030\005\010\013\017\015" +
    "\006\020\005\021\013\022\021\023\015\024\012\036\020" +
    "\037\004\040\007\001\002\000\036\002\ufffa\005\ufffa\013" +
    "\ufffa\015\ufffa\016\ufffa\020\ufffa\021\ufffa\022\ufffa\023\ufffa" +
    "\024\ufffa\025\ufffa\036\ufffa\037\ufffa\040\ufffa\001\002\000" +
    "\036\002\uffee\005\uffee\013\uffee\015\uffee\016\uffee\020\uffee" +
    "\021\uffee\022\uffee\023\uffee\024\uffee\025\112\036\uffee\037" +
    "\uffee\040\uffee\001\002\000\036\002\ufff9\005\ufff9\013\ufff9" +
    "\015\ufff9\016\ufff9\020\ufff9\021\ufff9\022\ufff9\023\ufff9\024" +
    "\ufff9\025\ufff9\036\ufff9\037\ufff9\040\ufff9\001\002\000\030" +
    "\005\010\013\017\015\006\020\005\021\013\022\021\023" +
    "\015\024\012\036\020\037\004\040\007\001\002\000\036" +
    "\002\uffef\005\uffef\013\uffef\015\uffef\016\uffef\020\uffef\021" +
    "\uffef\022\uffef\023\uffef\024\uffef\025\uffef\036\uffef\037\uffef" +
    "\040\uffef\001\002\000\036\004\uffe9\005\uffe9\006\uffe9\007" +
    "\uffe9\014\uffe9\017\uffe9\026\uffe9\027\uffe9\030\uffe9\031\uffe9" +
    "\032\uffe9\033\uffe9\034\uffe9\035\uffe9\001\002\000\014\005" +
    "\010\013\017\020\005\021\013\022\021\001\002\000\014" +
    "\004\040\005\032\006\035\007\042\017\117\001\002\000" +
    "\016\005\ufff3\012\ufff3\013\ufff3\020\ufff3\021\ufff3\022\ufff3" +
    "\001\002\000\016\005\010\012\026\013\030\020\005\021" +
    "\013\022\021\001\002\000\010\017\122\034\061\035\063" +
    "\001\002\000\014\005\ufff2\013\ufff2\020\ufff2\021\ufff2\022" +
    "\ufff2\001\002\000\014\005\010\013\017\020\005\021\013" +
    "\022\021\001\002\000\014\004\040\005\032\006\035\007" +
    "\042\014\125\001\002\000\030\005\ufff1\013\ufff1\015\ufff1" +
    "\020\ufff1\021\ufff1\022\ufff1\023\ufff1\024\ufff1\036\ufff1\037" +
    "\ufff1\040\ufff1\001\002\000\030\005\010\013\017\015\006" +
    "\020\005\021\013\022\021\023\015\024\012\036\020\037" +
    "\004\040\007\001\002\000\036\002\ufff0\005\ufff0\013\ufff0" +
    "\015\ufff0\016\ufff0\020\ufff0\021\ufff0\022\ufff0\023\ufff0\024" +
    "\ufff0\025\ufff0\036\ufff0\037\ufff0\040\ufff0\001\002\000\032" +
    "\005\010\013\017\015\006\016\131\020\005\021\013\022" +
    "\021\023\015\024\012\036\020\037\004\040\007\001\002" +
    "\000\036\002\ufffc\005\ufffc\013\ufffc\015\ufffc\016\ufffc\020" +
    "\ufffc\021\ufffc\022\ufffc\023\ufffc\024\ufffc\025\ufffc\036\ufffc" +
    "\037\ufffc\040\ufffc\001\002\000\014\005\010\013\017\020" +
    "\005\021\013\022\021\001\002\000\036\004\040\005\032" +
    "\006\035\007\042\014\uffe7\017\uffe7\026\uffe7\027\uffe7\030" +
    "\uffe7\031\uffe7\032\uffe7\033\uffe7\034\uffe7\035\uffe7\001\002" +
    "\000\004\013\135\001\002\000\016\005\010\012\026\013" +
    "\030\020\005\021\013\022\021\001\002\000\010\014\137" +
    "\034\061\035\063\001\002\000\030\005\ufff7\013\ufff7\015" +
    "\ufff7\020\ufff7\021\ufff7\022\ufff7\023\ufff7\024\ufff7\036\ufff7" +
    "\037\ufff7\040\ufff7\001\002\000\030\005\010\013\017\015" +
    "\006\020\005\021\013\022\021\023\015\024\012\036\020" +
    "\037\004\040\007\001\002\000\036\002\ufff6\005\ufff6\013" +
    "\ufff6\015\ufff6\016\ufff6\020\ufff6\021\ufff6\022\ufff6\023\ufff6" +
    "\024\ufff6\025\ufff6\036\ufff6\037\ufff6\040\ufff6\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\137\000\010\002\015\003\010\004\013\001\001\000" +
    "\004\011\133\001\001\000\002\001\001\000\010\002\127" +
    "\003\010\004\013\001\001\000\002\001\001\000\004\004" +
    "\113\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\003" +
    "\073\004\013\001\001\000\004\004\072\001\001\000\004" +
    "\013\021\001\001\000\002\001\001\000\006\003\022\004" +
    "\013\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\004\030\005\026\001\001\000\006\004\030\005\071\001" +
    "\001\000\002\001\001\000\006\004\056\005\055\001\001" +
    "\000\002\001\001\000\004\004\054\001\001\000\004\004" +
    "\053\001\001\000\004\004\052\001\001\000\004\004\051" +
    "\001\001\000\004\004\050\001\001\000\004\004\047\001" +
    "\001\000\004\004\046\001\001\000\004\004\045\001\001" +
    "\000\004\004\044\001\001\000\004\004\043\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\017\065\001\001\000\002\001\001\000\004\020\063" +
    "\001\001\000\006\004\030\005\064\001\001\000\002\001" +
    "\001\000\006\004\030\005\066\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\004\076\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\004\030\005\103" +
    "\001\001\000\002\001\001\000\004\007\105\001\001\000" +
    "\006\003\106\004\013\001\001\000\004\010\107\001\001" +
    "\000\004\006\110\001\001\000\002\001\001\000\006\003" +
    "\112\004\013\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\004\115\001\001\000\002\001\001\000\004\014" +
    "\117\001\001\000\006\004\030\005\120\001\001\000\002" +
    "\001\001\000\004\015\122\001\001\000\004\004\123\001" +
    "\001\000\002\001\001\000\004\016\125\001\001\000\006" +
    "\003\126\004\013\001\001\000\002\001\001\000\006\003" +
    "\073\004\013\001\001\000\002\001\001\000\004\004\132" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\004" +
    "\030\005\135\001\001\000\002\001\001\000\004\012\137" +
    "\001\001\000\006\003\140\004\013\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // lista_de_sent ::= sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_de_sent",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= lista_de_sent EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // lista_de_sent ::= lista_de_sent sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_de_sent",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // sentencia ::= expresion PYC 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // sentencia ::= PRINT AP expresion CP PYC 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 Generador.print(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // sentencia ::= AK lista_de_sent CK 
            {
              Object RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NT$0 ::= 
            {
              Object RESULT =null;
		int finIfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int finIfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String finIf = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tag c = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 Generador.label(c.getV()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int finIfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int finIfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String finIf = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Tag c = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
 Generador.goTo(finIf); Generador.label(c.getF()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // sentencia ::= IF AP cond CP NT$0 sentencia NT$1 elsePart 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int finIfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int finIfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String finIf = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Tag c = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		 Generador.label(finIf); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NT$2 ::= 
            {
              Object RESULT =null;
		int inWhileleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int inWhileright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String inWhile = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 Generador.label(inWhile); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NT$3 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int inWhileleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int inWhileright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String inWhile = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tag c = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 Generador.label(c.getV()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // sentencia ::= WHILE NT$2 AP cond CP NT$3 sentencia 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int inWhileleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int inWhileright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String inWhile = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Tag c = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 Generador.goTo(inWhile); Generador.label(c.getF()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NT$4 ::= 
            {
              Object RESULT =null;
		int inDoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int inDoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String inDo = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 Generador.label(inDo); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // sentencia ::= DO NT$4 sentencia WHILE AP cond CP PYC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int inDoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int inDoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String inDo = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tag c = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 Generador.label(c.getV()); Generador.goTo(inDo); Generador.label(c.getF());	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NT$5 ::= 
            {
              Object RESULT =null;
		int inForleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int inForright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String inFor = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 Generador.label(inFor);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NT$6 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int inForleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int inForright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String inFor = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tag c1 = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 RESULT = Generador.getTag();	Generador.label(RESULT.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NT$7 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int inForleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int inForright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String inFor = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Tag c1 = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 Generador.goTo(inFor); Generador.label(c1.getV()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // sentencia ::= FOR AP expresion PYC NT$5 cond PYC NT$6 expresion CP NT$7 sentencia 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int inForleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int inForright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String inFor = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Tag c1 = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 Generador.goTo(RESULT.toString()); Generador.label(c1.getF()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // elsePart ::= ELSE sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elsePart",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // elsePart ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elsePart",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expresion ::= expresion MAS expresion 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Generador.aritmetica(e1 + " + " + e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expresion ::= expresion MENOS expresion 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Generador.aritmetica(e1 + " - " + e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expresion ::= expresion POR expresion 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Generador.aritmetica(e1 + " * " + e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expresion ::= expresion DIV expresion 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Generador.aritmetica(e1 + " / " + e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expresion ::= MENOS expresion 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Generador.aritmetica(" -" + e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expresion ::= AP expresion CP 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expresion ::= IDENT ASIG expresion 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Generador.asignacion(i, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expresion ::= IDENT 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expresion ::= NUMERO 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expresion ::= NUMEROF 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // cond ::= expresion IG expresion 
            {
              Tag RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Generador.condicion(e1, Tag.IG, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // cond ::= expresion NIG expresion 
            {
              Tag RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Generador.condicion(e1, Tag.NIG, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // cond ::= expresion MEN expresion 
            {
              Tag RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Generador.condicion(e1, Tag.MEN, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // cond ::= expresion MENIG expresion 
            {
              Tag RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Generador.condicion(e1, Tag.MENIG, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // cond ::= expresion MAY expresion 
            {
              Tag RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Generador.condicion(e1, Tag.MAY, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // cond ::= expresion MAYIG expresion 
            {
              Tag RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Generador.condicion(e1, Tag.MAYIG, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // cond ::= NOT cond 
            {
              Tag RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tag c = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
								                               String temp = c.getV();
								                               c.setV(c.getF());
								                               c.setF(temp);
								                               RESULT = c;
							                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // NT$8 ::= 
            {
              Tag RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tag c1 = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 Generador.label(c1.getV()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // cond ::= cond AND NT$8 cond 
            {
              Tag RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Tag) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Tag c1 = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tag c2 = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Generador.label(c1.getF()); Generador.goTo(c2.getV()); RESULT = c2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // NT$9 ::= 
            {
              Tag RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tag c1 = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 Generador.label(c1.getF()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // cond ::= cond OR NT$9 cond 
            {
              Tag RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Tag) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Tag c1 = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tag c2 = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Generador.label(c1.getV()); Generador.goTo(c2.getF()); RESULT = c2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // cond ::= AP cond CP 
            {
              Tag RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tag c = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
