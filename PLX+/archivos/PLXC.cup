import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.List;

action code {:
	Variable var = new Variable(0,0);

	ArrayList<Integer> dims = new ArrayList<Integer>();

	ArrayList<String> dimsAsig = new ArrayList<String>();

	/* New Types of vars */
	ArrayList<String> tipos = new ArrayList<String>();
	int newTipos = 10;

	String switchVar = "";
	String switchTag = "";
	
	int contCase = 0;

	String tempQuest = "";
:}

parser code {:
    @Override
    public void report_error(String message, Object info){ // Syntax error handling message
        Generador.error();
	    Generador.halt();
    }
:}

/* Terminales */

terminal 			INT;
terminal			CHAR;
terminal 			FLOAT;
terminal			COMILLAS;
terminal			CASINT, CASFLOAT;
terminal 			AC, CC;
terminal 			PYC, COMA, POR, AK, CK, ASIG, AP, CP, DOSPUNTOS;
terminal 			MASEQ;
terminal     String IF, ELSE;
terminal 			PRINT;
terminal			TRUE, FALSE;
terminal     String DO, WHILE;
terminal     String TO, STEP, DOWNTO, IN;
terminal     String FOR;
terminal     String SWITCH;
terminal     String CASE;
terminal 			DEFAULT, BREAK;
terminal	 		MASMAS;
terminal 			DIR;
terminal			PREINCR;
terminal 			MENOSMENOS;
terminal 			MAS, MENOS, NOT, DIV, MOD, MENOSUNARIO;
terminal 			MEN, MAY, MENIG, MAYIG;
terminal 			IG, NIG;
terminal 			AND;
terminal 			OR;
terminal    String	QUESTION;
terminal			TYPEDEF;

terminal    Integer NUMERO;
terminal    Double NUMEROF;
terminal    String IDENT;

 /* No terminales */

non terminal 					lista_de_sent;
non terminal 					sentencia;
non terminal 					elsePart;
non terminal            	Tag cond;
non terminal 					listaDec;
non terminal 					dec;
non terminal 					tipo;
non terminal					character;
non terminal         	 String break;
non terminal         	 String forInIdent;
non terminal         	Object	forArray;
non terminal   	   List<String> arrayIni;
non terminal ArrayList<Integer> dimensiones;
non terminal  ArrayList<String> dimensionesAsig;
non terminal        	String	incremento;
non terminal        	String	variable, numero;
non terminal        	String	asig;
non terminal        	String	casting;
non terminal        	String	expresion, stepPart;
non terminal       	 	String	varOrNum;
non terminal        	String	case;
non terminal        	String	listaCase;
non terminal        	String	conditionalQuest;
non terminal        	String	typedefSent;

/* Precedencia */

precedence left     COMA;
precedence right   	ASIG, MASEQ;
precedence right	QUESTION;
precedence left    	OR;
precedence left    	AND;
precedence left    	IG, NIG;
precedence left    	MEN, MENIG, MAY, MAYIG;
precedence left    	MAS, MENOS;
precedence left    	POR, DIV, MOD;
precedence right   	MENOSUNARIO, PREINCR, NOT, CASINT, CASFLOAT, DIR;
precedence left    	MASMAS, MENOSMENOS, AC, CC, AP, CP;
precedence nonassoc	IF, ELSE;


/* Gramatica */

lista_de_sent	        ::=	sentencia
		            |	lista_de_sent sentencia
		            ;
sentencia		        ::=	expresion:e PYC			                        {: :}
			        |	IF:tagIf AP cond:c CP        		            	{: Generador.label(c.getV()); :}		
				        sentencia			        			            {: Generador.goTo(tagIf); Generador.label(c.getF()); :}
				        elsePart	        				            	{: Generador.label(tagIf); :}
			        |	WHILE:tagWhile AP	        		            	{: Generador.label(tagWhile); :}
				        cond:c CP					                    	{: Generador.label(c.getV()); :}
				        sentencia				        		            {: Generador.goTo(tagWhile); Generador.label(c.getF()); :}
			        |	DO:tagDo		        			            	{: Generador.label(tagDo); :}
			            sentencia        						            {: :}
				        WHILE AP cond:c CP PYC		                    	{: Generador.label(c.getV()); Generador.goTo(tagDo); Generador.label(c.getF()); :}
			        |	FOR:tagFor AP expresion:e1 PYC	                    {: Generador.label(tagFor); :}
				        cond:c1 PYC	        				            	{: RESULT = Generador.getTag(); Generador.label(RESULT.toString()); :}
				        expresion:e2 CP	                     				{: Generador.goTo(tagFor); Generador.label(c1.getV()); :}
				        sentencia			                              	{: Generador.goTo(RESULT.toString()); Generador.label(c1.getF()); :}
			        |	FOR:tagFor expresion:e1           	        		{: :}
				        TO:tagTo expresion:e2	            	        	{: 
                                                                           		Generador.label(tagFor); 
                                                                           		RESULT = Generador.condicion(e2, Tag.MEN, e1);
                                                                           		Generador.label(tagTo);
                                                                        	:}
				        stepPart:p DO                    					{:
													                       		Generador.asignacion(TSimb.getVar(e1), e1 + " + " + p);
                                                                           		Generador.goTo(tagFor);
                                                                           		Generador.label(((Tag)RESULT).getF());
													                    	:}		
				        sentencia	        	            					{: Generador.goTo(tagTo); Generador.label(((Tag)RESULT).getV()); :}
			        |	FOR:tagFor expresion:e1	                    			{: :}
				        DOWNTO:tagD expresion:e2	                       		{:
													                       		Generador.label(tagFor);
													                       		RESULT = Generador.condicion(e1, Tag.MEN, e2);
                                                                           		Generador.label(tagD);
													                    	:}
				        stepPart:p DO	            	        			{:
													                       		Generador.asignacion(TSimb.getVar(e1), e1 + " - " + p);
                                                                           		Generador.goTo(tagFor);
                                                                           		Generador.label(((Tag)RESULT).getF());
													                    	:}
				        sentencia	        			            		{: Generador.goTo(tagD); Generador.label(((Tag)RESULT).getV()); :}

			        |	FOR:tagFor forInIdent:e1                      		{: :}	
				        IN:tagIN forArray:e2 DO	                       		{: RESULT = Generador.forIn(e1, tagFor, e2); :}				
				        sentencia	                    					{:
													                       		Generador.goTo(tagFor);
													                       		Generador.label(((Tag)RESULT).getF());
													                       		Generador.label(tagIN);								
													                    	:}
			        |	SWITCH:tagS AP expresion:v CP AK	                {: switchVar = v; switchTag = tagS; :}					
				        listaCase:l	        				            	{: Generador.label(l); :}
				        DEFAULT DOSPUNTOS       			            	{: :}
				        sentencia	        					            {: :}
				        CK		        					            	{: Generador.label(switchTag); :}								
			        |	PRINT AP expresion:e1 CP PYC		                {: Generador.print(e1); :}
			        |	AK 			        				            	{: TSimb.upLevel(); :}		
			        	lista_de_sent CK        				            {: TSimb.clear(TSimb.getLevel()); TSimb.downLevel(); :}
			        |	typedefSent	PYC	        			            	{: :}
			        |	tipo listaDec PYC       			            	{: :}
			        ;	
conditionalQuest	::=	AP cond:c CP            			            	{: Generador.label(c.getV()); :} 							
						QUESTION:q expresion:e1                       		{:
                    													   		tempQuest = Generador.getTemp(1);
														                   		Generador.asignacion(tempQuest, e1);
														                   		Generador.goTo(q);
														                   		Generador.label(c.getF());
													                    	:}						
						DOSPUNTOS expresion:e2	                         	{:
														                   		Generador.asignacion(tempQuest, e2);
														                   		Generador.label(q);
														                   		RESULT = tempQuest;
													                    	:}
					;
forInIdent	        ::=	IDENT:i	                			            	{: RESULT = i; :}   		
		        	|	IDENT:i AC expresion:e1 CC        		            {: RESULT = i + "[" + e1 + "]"; :}
	        		;
case 		        ::=	CASE:c varOrNum:v DOSPUNTOS		            		{:
															                	RESULT = Generador.getTag();
															                	Generador.printLine("	if (" + switchVar + " != " + v + ")" + " goto " + c + ";");
															                	if(contCase >= 1){
															                    	Generador.label(RESULT.toString());
															                	}
															                	contCase++;
														                	:}
					    lista_de_sent       					            {: :}
						break:b	        					            	{:
														                    	Generador.goTo(b);
														                    	Generador.label(c);
														                    	if(b.equals(switchTag)){
															                    	RESULT = Generador.getTag();
														                    	}
														                    	else{
															                    	RESULT = b;
														                    	}
													                    	:}
			        ;
break 		        ::=	BREAK PYC	    					            	{: RESULT = switchTag; :}
			        |										            	{: RESULT = Generador.getTag(); :}
	        		;
listaCase	        ::=	case:c	    						           		{: RESULT = c; :}   			
			        |	listaCase case:c    				            	{: RESULT = c; :}
        			;
varOrNum	        ::=	variable:i	            			            	{: RESULT = i; :}
			        |	numero:n	            			            	{: RESULT = n;	:}
	        		;
stepPart	        ::=	STEP expresion:e1	        				        {: RESULT = e1; :}
        			|       								            	{: RESULT = "1"; :}
        			;
forArray	        ::=	IDENT:i	        					            	{: RESULT = i;	:}		
		        	|	AK arrayIni:l CK        			            	{: RESULT = l; :}
			        ;
tipo                ::= INT                                             	{: var = new Variable(TSimb.getLevel(), Variable.INTEGER); :}								
                    |   FLOAT                                           	{: var = new Variable(TSimb.getLevel(), Variable.REAL); :}
				    |	CHAR    							            	{: var = new Variable(TSimb.getLevel(), Variable.CHAR); :}
                    ;
listaDec	        ::=	dec
		            |	listaDec COMA dec
		            ;
dec		            ::=	IDENT:i ASIG expresion:e1         		            {: TSimb.addVar(i, var); Generador.asignacion(TSimb.getVar(i), e1); :}
		            |	IDENT:i	            				            	{: TSimb.addVar(i, var); :}
		            |	IDENT:i ASIG character	                        	{: :}
		            |   IDENT:i dimensiones:d ASIG expresion:e1	            {:
													                        	var.setIsArray(true);
													                        	var.setTam(d);
													                        	dims.clear();
													                        	TSimb.addVar(i, var);
													                        	Generador.asignacion(TSimb.getVar(i), e1);
												                        	:}
		            |   IDENT:i dimensiones:d ASIG AK arrayIni:e1 CK  		{:
															                	var.setIsArray(true);
															                	var.setTam(d);
															                	dims.clear();
															                	TSimb.addVar(i, var);
															                	RESULT = Generador.arrayInit(i, e1);
														                	:}
		            |	IDENT:i dimensiones:d				            	{:
													                        	var.setIsArray(true);
													                        	var.setTam(d);
													                        	dims.clear();
													                        	TSimb.addVar(i, var);
												                        	:}
		            |	POR IDENT:i							        		{:
													                        	var.setIsPointer(true);
													                        	TSimb.addVar(i, var);
												                        	:}
		            ;
dimensiones	        ::=	AC NUMERO:n CC                  					{: dims.add(n); RESULT = dims; :}
			        |	dimensiones:d AC NUMERO:n CC            			{: dims.add(n);	RESULT = dims; :}
	        		;
character	        ::=	COMILLAS IDENT:i COMILLAS		                	{: :}
        			;
typedefSent		    ::=	TYPEDEF tipo IDENT:i	                        	{:
													                        	if(tipos.contains(i)){
														                        	Generador.error();
														                        	Generador.halt();
													                        	}
													                        	else{
														                        	tipos.add(i);
													                        	}
												                        	:}
				    ;
elsePart 	        ::= ELSE sentencia
	   	            |
	   	            ;
expresion		    ::=	expresion:e1 MAS expresion:e2                   	{: RESULT = Generador.aritmetica(e1, e2, Generador.MAS); :}
		            |	expresion:e1 MENOS expresion:e2			            {: RESULT = Generador.aritmetica(e1, e2, Generador.MENOS); :}
		            |	expresion:e1 POR expresion:e2			            {: RESULT = Generador.aritmetica(e1, e2, Generador.MULT); :}
		            | 	expresion:e1 DIV expresion:e2			            {: RESULT = Generador.aritmetica(e1, e2, Generador.DIV); :}
		            |	expresion:e1 MOD expresion:e2			            {:
											                                	String t1 = Generador.aritmetica(e1, e2, Generador.DIV);
											                                	String t2 = Generador.aritmetica(t1, e2, Generador.MULT);
											                                	RESULT = Generador.aritmetica(e1, t2, Generador.MENOS);
										                                	:}
		            | 	MENOS expresion:e1                    				{: RESULT = Generador.aritmetica("-" + e1, "", 0); :} %prec MENOSUNARIO		
		            | 	AP expresion:e1 CP				                    {: RESULT = e1; :}
		            |	conditionalQuest:q	                    			{: RESULT = q; :}
		            |	casting:n					                    	{: RESULT = n; 	:}
		            |	incremento:i				                    	{: RESULT = i;	:}		
		            |	asig:a						                    	{: RESULT = a;	:}
		            |	variable:v					                    	{: RESULT = v; :}
		            |	numero:n					                    	{: RESULT = n;	:}  
		            ;
numero		        ::=	NUMERO:n				                        	{: RESULT = n.toString(); :}		
		            |	NUMEROF:n					                    	{: RESULT = n.toString(); :}
		            ;
asig 		        ::= IDENT:i ASIG expresion:e1 				            {: RESULT = Generador.asignacion(TSimb.getVar(i), e1); :}
		            |	IDENT:i dimensionesAsig:a ASIG expresion:e1	        {: RESULT = Generador.asignacion(TSimb.getVar(i), a, e1);	dimsAsig.clear(); :}
		            |	IDENT:i ASIG AK arrayIni:a CK			        	{: RESULT = Generador.arrayInit(i, a); :}
		            |	IDENT:i MASEQ expresion:e1        					{: RESULT = Generador.asignacionPlus(TSimb.getVar(i), e1); :}
		            |	IDENT:i dimensionesAsig:a MASEQ expresion:e1	    {: RESULT = Generador.asignacionPlus(TSimb.getVar(i), a, e1);dimsAsig.clear(); :}
		            ;
dimensionesAsig 	::=	AC expresion:e CC						            {: dimsAsig.add(e); RESULT = dimsAsig; :}
					|	dimensionesAsig:a AC expresion:e CC	                {: dimsAsig.add(e); RESULT = dimsAsig; :}
					;
arrayIni 			::=		expresion:e							            {:
																            	RESULT = new ArrayList<String>();
																            	RESULT.add(e);
															            	:}
					|	arrayIni:a COMA expresion:e				            {:
																            	a.add(e);
																            	RESULT = a;
															            	:}
					;
variable	        ::=	IDENT:i					                        	{:
											                                	if(TSimb.exists(i)){
												                                	RESULT = TSimb.getVar(i);
                                                                            	}
                                                                            	else{
                                                                                	Generador.error();
                                                                                	Generador.halt();
                                                                            	}
										                                	:}
			        |	IDENT:i AC expresion:e CC		                    {:
											                                	if(TSimb.exists(i)){
												                                	String aux = Generador.getTemp(TSimb.getLastVar(i).getTipo());
												                                	Generador.asignacion(aux , TSimb.getVar(i) + "[" + e + "]");
												                                	RESULT = aux;
											                                	}
											                                	else{
												                                	Generador.error();
												                                	Generador.halt();
											                                	}
										                                	:}
			        |	POR IDENT:i	                                		{:
									                                        	if(TSimb.getLastVar(i).isPointer()){
										                                        	String aux = Generador.getTemp(TSimb.getLastVar(i).getTipo());
										                                        	Generador.asignacion(aux, "* " + TSimb.getVar(i));
										                                        	RESULT = aux;
									                                        	}
									                                        	else{
										                                        	Generador.error();
										                                        	Generador.halt();
									                                        	}
								                                        	:}
			        |	DIR IDENT:i		                            		{:
									                                        	if(TSimb.exists(i)){
										                                        	String aux = Generador.getTemp(TSimb.getLastVar(i).getTipo());
										                                        	Generador.asignacion(aux, "& " + TSimb.getVar(i));
										                                        	RESULT = aux;
									                                        	}
									                                        	else{
										                                        	Generador.error();
										                                        	Generador.halt();
									                                        	}
								                                        	:}
			        ;
incremento	        ::=	MASMAS IDENT:i1                               		{: 
                                                                            	RESULT = Generador.asignacion(TSimb.getVar(i1), TSimb.getVar(i1) + " + " + "1"); 
                                                                        	:} %prec PREINCR
                    |   IDENT:i1 MASMAS                               		{:
                                                                            	String temp = Generador.getTemp(TSimb.getLastVar(i1).getTipo());
                                                                            	Generador.asignacion(temp, TSimb.getVar(i1));
                                                                            	Generador.asignacion(TSimb.getVar(i1), TSimb.getVar(i1) + " + " + "1");
                                                                            	RESULT = temp;
                                                                        	:}
                    |   MENOSMENOS IDENT:i1                           		{: 
                                                                            	RESULT = Generador.asignacion(TSimb.getVar(i1), TSimb.getVar(i1) + " - " + "1"); 
                                                                        	:} %prec PREINCR
                    |   IDENT:i1 MENOSMENOS                           		{:
                                                                            	String temp = Generador.getTemp(TSimb.getLastVar(i1).getTipo());
                                                                            	Generador.asignacion(temp, TSimb.getVar(i1));
                                                                            	Generador.asignacion(TSimb.getVar(i1), TSimb.getVar(i1) + " - " + "1");
                                                                            	RESULT = temp;
                                                                        	:}
		            ;
casting 	        ::=	CASINT expresion:e 	                                {: RESULT = Generador.casting(e, Variable.INTEGER); :}
			        |   CASFLOAT varOrNum:n1                           		{: RESULT = Generador.casting(n1, Variable.REAL); :}       	
			            DIV varOrNum:n2	                                	{: 
									                                        	String e2 = Generador.casting(n2, Variable.REAL); 
									                                        	RESULT = Generador.aritmetica(RESULT, e2, Generador.DIV); 
									                                        :}
			        ;
cond 		        ::=	expresion:e1 IG expresion:e2		                {: RESULT = Generador.condicion(e1, Tag.IG, e2); :}
		            |	expresion:e1 NIG expresion:e2		                {: RESULT = Generador.condicion(e1, Tag.NIG, e2); :}
		            | 	expresion:e1 MEN expresion:e2		                {: RESULT = Generador.condicion(e1, Tag.MEN, e2); :}
		            |	expresion:e1 MENIG expresion:e2		                {: RESULT = Generador.condicion(e1, Tag.MENIG, e2);	:}
		            | 	expresion:e1 MAY expresion:e2		                {: RESULT = Generador.condicion(e1, Tag.MAY, e2); :}
		            | 	expresion:e1 MAYIG expresion:e2		                {: RESULT = Generador.condicion(e1, Tag.MAYIG, e2); :}
		            |	NOT cond:c			                            	{:
								                                            	String temp = c.getV();
								                                            	c.setV(c.getF());
								                                            	c.setF(temp);
								                                            	RESULT = c;
							                                            	:}	
		            | 	cond:c1 AND			                            	{: Generador.label(c1.getV()); :}
			            cond:c2				                            	{:
								                                            	Generador.label(c1.getF());
								                                            	Generador.goTo(c2.getV());
								                                            	RESULT = c2;
							                                            	:}
		            |	cond:c1 OR			                            	{: Generador.label(c1.getF()); :}
			            cond:c2				                            	{:
								                                            	Generador.label(c1.getV());
								                                            	Generador.goTo(c2.getF());
								                                            	RESULT = c2;
							                                            	:}
		            |	AP cond:c CP	                                	{: RESULT = c; :}
		            |	TRUE			                                	{:
								                                            	Tag tag = new Tag(Generador.getTag(), Generador.getTag());
								                                            	Generador.goTo(tag.getV());
								                                            	RESULT = tag;
							                                            	:}
		            |	FALSE			                                	{:
								                                            	Tag tag = new Tag(Generador.getTag(), Generador.getTag());
								                                            	Generador.goTo(tag.getF());
								                                            	RESULT = tag;
							                                            	:}
		            ;
