import java_cup.runtime.*;

parser code {:
    @Override
    public void report_error(String message, Object info){      // Syntax error handling message
        Generador.error();
	Generador.halt();
    }
:}

/*Terminales */

terminal            MAS, MENOS, POR, DIV, ASIG, MENOSUNARIO, NOT;
terminal            AP, CP, AK, CK, PYC;
terminal     String IDENT; 
terminal    Integer NUMERO;
terminal     Double NUMEROF;
terminal            PRINT;
terminal     String IF;
terminal            ELSE;
terminal            MEN, MAY, MENIG, MAYIG;
terminal            IG, NIG;
terminal            AND;
terminal            OR;
terminal     String DO;
terminal     String WHILE;
terminal     String FOR;

terminal 		    INT;
terminal 		    AC, CC, COMA;
terminal    String	TO, STEP, DOWNTO;
terminal 		    MASMAS;
terminal 		    MENOSMENOS;
terminal 			MOD;

/* Non terminales */

non terminal        lista_de_sent;
non terminal        sentencia;
non terminal String expresion;
non terminal    Tag cond; 
non terminal        elsePart;

non terminal 		listaDec;
non terminal 		dec;
non terminal String stepPart;

/* Precedencia */

precedence  left COMA; 				//nuevo
precedence right ASIG; 				//nuevo
precedence  left MAS, MENOS;
precedence  left POR, DIV, MOD; 	//mod nuevo
precedence  left MENOSUNARIO;
precedence  left AND, OR;
precedence  left IF;
precedence  left ELSE;
precedence right NOT;

/* Gramatica */

lista_de_sent       ::= sentencia
			       	|  	lista_de_sent sentencia
			        ;
sentencia		   ::= 	expresion PYC                 	
          // PRINT
	 				|	PRINT AP expresion:e CP PYC		    {: Generador.print(e); :}
	 	  // Anonymous block
	 				|	AK 			            			{: TSimb.upLevel(); :}
			    		lista_de_sent CK    				{: TSimb.clear(TSimb.getLevel()); TSimb.downLevel(); :}
		  // IF - ELSE (optional)
					|	IF:finIf AP cond:c CP            	{: Generador.label(c.getV()); :}	
                        sentencia                           {: Generador.goTo(finIf); Generador.label(c.getF()); :}       
                        elsePart			                {: Generador.label(finIf); :}
		  // WHILE
					|	WHILE:inWhile   		            {: Generador.label(inWhile); :}                                 
			            AP cond:c CP   		                {: Generador.label(c.getV()); :}
			            sentencia                			{: Generador.goTo(inWhile); Generador.label(c.getF()); :}
		  // DO WHILE
					|	DO:inDo			                    {: Generador.label(inDo); :}
            			sentencia WHILE AP cond:c CP PYC	{: Generador.label(c.getV()); Generador.goTo(inDo); Generador.label(c.getF());	:}
		  // FOR
					|	FOR:inFor AP expresion:e1 PYC	    {: Generador.label(inFor);	:}
			            cond:c PYC	                		{: RESULT = Generador.getTag();	Generador.label(RESULT.toString()); :}
			            expresion:e2 CP	            		{: Generador.goTo(inFor); Generador.label(c.getV()); :}
			            sentencia	            			{: Generador.goTo(RESULT.toString()); Generador.label(c.getF()); :}
		// FOR PASCAL
          // FOR TO
					| 	FOR:tagFor expresion:e1   			{: :}
		    			TO:tagTo expresion:e2  				{: Generador.label(tagFor); RESULT = Generador.condicion(e2, Tag.MEN, e1); Generador.label(tagTo); :}
    					stepPart:p DO	    				{: 
                                               					Generador.asignacion(TSimb.getVar(e1), e1 + " + " + p); 
                                               					Generador.goTo(tagFor); 
                                               					Generador.label(((Tag)RESULT).getF());
							                				:}	
			    		sentencia	        				{: Generador.goTo(tagTo); Generador.label(((Tag)RESULT).getV()); :}
		  // FOR DOWNTO
					| 	FOR:tagFor expresion:e1	   			{: :}
		    			DOWNTO:tagD expresion:e2	   		{: Generador.label(tagFor); RESULT = Generador.condicion(e1, Tag.MEN, e2); Generador.label(tagD); :}
			    		stepPart:p DO			    		{:
			                                   					Generador.asignacion(TSimb.getVar(e1), e1 + " - " + p);
                                               					Generador.goTo(tagFor);
                                               					Generador.label(((Tag)RESULT).getF());
							                				:}
			    		sentencia				        	{: Generador.goTo(tagD); Generador.label(((Tag)RESULT).getV()); :}
	 	  // Declarations
	 				| 	INT listaDec PYC
	 				;
elsePart 	       ::= 	ELSE sentencia                      %prec ELSE
	   	            |  /* EPSILON */                      	%prec IF
	   	            ;
stepPart		   ::=	STEP expresion:e	        		{: RESULT = e; :}
	         		|  /* EPSILON */         				{: RESULT = "1"; :}
		     		;
		  // List of declarations
listaDec		   ::=	dec
		     		|	listaDec COMA dec
		     		;
dec		    	   ::=	IDENT:i ASIG expresion:e			{: TSimb.addVar(i, TSimb.getLevel()); Generador.asignacion(TSimb.getVar(i), e); :}
		     		|	IDENT:i	        					{: TSimb.addVar(i, TSimb.getLevel()); :}
	         		;
expresion   	   ::=	expresion:e1 MAS expresion:e2       {: RESULT = Generador.aritmetica(e1 + " + " + e2); :}		
		            |	expresion:e1 MENOS expresion:e2     {: RESULT = Generador.aritmetica(e1 + " - " + e2); :}
		            |	expresion:e1 POR expresion:e2       {: RESULT = Generador.aritmetica(e1 + " * " + e2); :}
		            | 	expresion:e1 DIV expresion:e2       {: RESULT = Generador.aritmetica(e1 + " / " + e2); :}
		            |	expresion:e1 MOD expresion:e2   	{: // nuevo MOD
				                               					String t1 = Generador.aritmetica(e1 + " / " + e2);
								               					String t2 = Generador.aritmetica(t1 + " * " + e2);
								               					RESULT = Generador.aritmetica(e1 + " - " + t2);
							                				:}
		            | 	MENOS expresion:e		            {: RESULT = Generador.aritmetica(" -" + e); :}                 %prec MENOSUNARIO
		            | 	AP expresion:e CP	                {: RESULT = e; :}       
                    |	IDENT:i ASIG expresion:e		    {: //usando T.simb	
								               					if(TSimb.exists(i)){
									               					RESULT = Generador.asignacion(TSimb.getVar(i), e);
								               					}
								               					else{
									               					Generador.error();
									               					Generador.halt();
								               					}
							                				:}
                    |	IDENT:i			                	{: //usando T.simb	
								               					if(TSimb.exists(i)){
									               					RESULT = TSimb.getVar(i);
								               					}
								               					else{
									               					Generador.error();
									               					Generador.halt();
								               					}
							                				:}
                    |  	NUMERO:n                            {: RESULT = n.toString(); :}
                    |	NUMEROF:n			                {: RESULT = n.toString(); :}
          // PRE y POST INCR 
                   	|	MASMAS IDENT:i						{: RESULT = Generador.asignacion(TSimb.getVar(i), TSimb.getVar(i) + " + " + "1"); :}
		     		|	IDENT:i MASMAS						{:
								               					String temp = Generador.getTemp();
								               					Generador.asignacion(temp, TSimb.getVar(i));
								               					Generador.asignacion(TSimb.getVar(i), TSimb.getVar(i) + " + " + "1");
								               					RESULT = temp;
							                				:}
		  // PRE y POST DECRE
					|	MENOSMENOS IDENT:i					{: RESULT = Generador.asignacion(TSimb.getVar(i), TSimb.getVar(i) + " - " + "1"); :}
		     		|	IDENT:i MENOSMENOS					{:
								               					String temp = Generador.getTemp();
                                               					Generador.asignacion(temp, TSimb.getVar(i));
                                               					Generador.asignacion(TSimb.getVar(i), TSimb.getVar(i) + " - " + "1");
                                               					RESULT = temp;
							                				:}		
                    ;
          
cond     	       ::=	expresion:e1 IG expresion:e2		{: RESULT = Generador.condicion(e1, Tag.IG, e2); :}
		            |	expresion:e1 NIG expresion:e2		{: RESULT = Generador.condicion(e1, Tag.NIG, e2); :}
		            | 	expresion:e1 MEN expresion:e2		{: RESULT = Generador.condicion(e1, Tag.MEN, e2); :}
		            |	expresion:e1 MENIG expresion:e2		{: RESULT = Generador.condicion(e1, Tag.MENIG, e2); :} 
		            | 	expresion:e1 MAY expresion:e2		{: RESULT = Generador.condicion(e1, Tag.MAY, e2); :}
		            | 	expresion:e1 MAYIG expresion:e2		{: RESULT = Generador.condicion(e1, Tag.MAYIG, e2); :}
                    |	NOT cond:c			                {:
								                               String temp = c.getV();
								                               c.setV(c.getF());
								                               c.setF(temp);
								                               RESULT = c;
							                                :}
                    | 	cond:c1 AND			                {: Generador.label(c1.getV()); :}
			          	cond:c2				                {: Generador.label(c1.getF()); Generador.goTo(c2.getV()); RESULT = c2; :}
		            | 	cond:c1 OR			                {: Generador.label(c1.getF()); :}
			          	cond:c2				                {: Generador.label(c1.getV()); Generador.goTo(c2.getF()); RESULT = c2; :}
                    |	AP cond:c CP		    	        {: RESULT = c; :}
		            ;